;; *****************************************************************************
;; 
;;  Title:       ExpressionEvaluator.dbl
;; 
;;  Type:        Partial class
;; 
;;  Description: Evaluates expression nodes to produce a true/false result
;; 
;;  Date:        30th August 2014
;; 
;;  Author:      Steve Ives, Synergex Professional Services Group
;;               http://www.synergex.com
;; 
;; *****************************************************************************
;; 
;;  Copyright (c) 2014, Synergex International, Inc.
;;  All rights reserved.
;; 
;;  Redistribution and use in source and binary forms, with or without
;;  modification, are permitted provided that the following conditions are met:
;; 
;;  * Redistributions of source code must retain the above copyright notice,
;;    this list of conditions and the following disclaimer.
;; 
;;  * Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation
;;    and/or other materials provided with the distribution.
;; 
;;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;;  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;;  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;;  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;;  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;;  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;;  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;;  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;;  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;;  POSSIBILITY OF SUCH DAMAGE.
;; 
;; *****************************************************************************

import System
import System.Collections.Generic
import System.Linq
import System.Text
import System.Threading.Tasks

.array 0

namespace CodeGen.Engine

    ;;; <summary>
    ;;; 
    ;;; </summary>
    public partial class ExpressionEvaluator

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="context"></param>
        public method ExpressionEvaluator
            context, @CodeGenContext 
            endparams
        proc
            registerButtonLoopExpressions()
            registerEnumLoopExpressions()
            registerEnumMemberLoopExpressions()
            registerFieldLoopExpressions()
            registerSelectionLoopExpressions()
            registerFileLoopExpressions()
            registerGenericExpressions()
            registerKeyLoopExpressions()
            registerSegmentLoopExpressions()
            registerLoopUtilityExpressions()
            registerNotInLoopExpressions()
            registerRelationLoopExpressions()
            registerRelationSegmentLoopExpressions()
            registerStructureLoopExpressions()
            registerTagLoopExpressions()
            registerInterfaceLoopExpressions()
            registerMethodLoopExpressions()
            registerParameterLoopExpressions()
            registerCustomEvaluators(context)
        endmethod

        ;;; <summary>
        ;;; 
        ;;; </summary>
        ;;; <param name="currentContext"></param>
        ;;; <param name="expression"></param>
        ;;; <param name="template"></param>
        ;;; <param name="loops"></param>
        ;;; <returns></returns>
        public method EvaluateExpression, boolean
            currentContextFn, @Func<ExpressionNode, TokenType>
            expression, @ExpressionNode 
            template, @FileNode 
            loops, @IEnumerable<LoopNode> 
            endparams
        proc
            data currentContext = currentContextFn(expression)

            lambda doNoEvaluatorMessage()
            begin
                mreturn string.Format("CODEGEN BUG: No evaluator method was found for the {0} expression <IF {1}>. Define a new evaluator method in ExpressionEvaluator.", currentContext.ToString(), expression.Value.Value)
            end
            data noEvaluatorMessage, @Func<string>, doNoEvaluatorMessage

            lambda doBadEvaluationRequestMessage()
            begin
                mreturn string.Format("CODEGEN BUG: Invalid request to evaluate expression of type {0}. Token value was {1}.", currentContext.ToString(), expression.Value.Value)
            end
            data badEvaluationRequestMessage, @Func<string>, doBadEvaluationRequestMessage

            lambda doFindAndRunEvaluator(evaluators)
            begin
                if(expression .is. UnaryExpressionNode) then
                begin
                    if(expression.Value.Value == "NOT")
                    begin
                        mreturn !EvaluateExpression(currentContextFn, ((@UnaryExpressionNode)expression).Expression, template, loops)
                    end
                end
                else if(expression .is. BinaryExpressionNode) then
                begin
                    data leftExpr = ((@BinaryExpressionNode)expression).Left
                    data rightExpr = ((@BinaryExpressionNode)expression).Right
                    if(expression.Value.Value == "AND") then
                        mreturn EvaluateExpression(currentContextFn, leftExpr, template, loops) && 
                        &    EvaluateExpression(currentContextFn, rightExpr, template, loops)
                    else if(expression.Value.Value == "OR") 
                        mreturn EvaluateExpression(currentContextFn, leftExpr, template, loops) || 
                        &    EvaluateExpression(currentContextFn, rightExpr, template, loops)
                end
                else if(expression .is. GroupExpressionNode)
                begin
                    mreturn EvaluateExpression(currentContextFn, ((@GroupExpressionNode)expression).Expression, template, loops)
                end

                ;;Normal expressions
                if (evaluators.ContainsKey(expression.Value.Value)) then
                    mreturn evaluators[expression.Value.Value](expression.Value, template, loops)
                
                ;;Loop utility expressions
                else if ((loops.Count() > 0) && (loopUtilityExpressionEvaluators.ContainsKey(expression.Value.Value))) then
                    mreturn loopUtilityExpressionEvaluators[expression.Value.Value](expression.Value, template, loops)

                ;;USERTOKEN_ and NOT_USERTOKEN_ expressions
                else if ((currentContext == TokenType.Generic) && (expression.Value.Value.StartsWith("USERTOKEN_") || expression.Value.Value.StartsWith("NOT_USERTOKEN_"))) then
                    mreturn evaluateUserToken(expression.Value, template, loops)

                ;;CUSTOM_ field loop expressions
                else if ((currentContext == TokenType.FieldLoop) && expression.Value.Value.StartsWith("CUSTOM_")) then
                    mreturn evaluateFieldCustom(expression.Value, template, loops)

                ;;CUSTOM_ key segment loop expressions
                else if ((currentContext == TokenType.KeySegmentLoop) && expression.Value.Value.StartsWith("CUSTOM_")) then
                    mreturn evaluateKeySegmentCustom(expression.Value, template, loops)

                ;;CUSTOM_ interface loop expressions
                else if ((currentContext == TokenType.InterfaceLoop) && expression.Value.Value.StartsWith("CUSTOM_INTERFACE_")) then
                    mreturn evaluateInterfaceCustom(expression.Value, template, loops)

                ;;CUSTOM_ method loop expressions
                else if ((currentContext == TokenType.MethodLoop) && expression.Value.Value.StartsWith("CUSTOM_METHOD_")) then
                    mreturn evaluateMethodCustom(expression.Value, template, loops)

                ;;CUSTOM_ parameter loop expressions
                else if ((currentContext == TokenType.ParameterLoop) && expression.Value.Value.StartsWith("CUSTOM_PARAMETER_")) then
                    mreturn evaluateParameterCustom(expression.Value, template, loops)

                ;;DEFINED_
                else if (expression.Value.Value.StartsWith("DEFINED_")) then
                    mreturn template.Context.Taskset.Defines.Contains(expression.Value.Value)

                ;;NOT_DEFINED_
                else if (expression.Value.Value.StartsWith("NOT_DEFINED_")) then
                    mreturn !template.Context.Taskset.Defines.Contains(expression.Value.Value.Replace("NOT_",""))

                ;;TWEAK_
                else if (expression.Value.Value.StartsWith("TWEAK_")) then
                begin
                    if (template.Context.CurrentTask.Tweaks != ^null) then
                        mreturn template.Context.CurrentTask.Tweaks.Contains(expression.Value.Value.Replace("TWEAK_",""))
                    else
                        mreturn false
                end

                ;;HARMONYCORE_CUSTOM_FIELD_TYPE_
                else if ((currentContext == TokenType.FieldLoop) && expression.Value.Value.StartsWith("HARMONYCORE_CUSTOM_FIELD_TYPE_")) then
                    mreturn evaluateFieldHcCustomType(expression.Value, template, loops)

                ;;COUNTER_
                else if ((expression.Value.Value.StartsWith("COUNTER_1_")
                &    ||   expression.Value.Value.StartsWith("COUNTER_2_")) 
                &    && 
                &    (expression.Value.Value.Contains("_EQ_")
                &    || expression.Value.Value.Contains("_NE_")
                &    || expression.Value.Value.Contains("_LT_")
                &    || expression.Value.Value.Contains("_GT_")
                &    || expression.Value.Value.Contains("_LE_")
                &    || expression.Value.Value.Contains("_GE_")
                &    || expression.Value.Value.Contains("_DB_") )) then
                    mreturn evaluateCounterValue(expression.Value, template, loops)

                ;;PARAM_NAME_IS_
                else if (expression.Value.Value.StartsWith("PARAM_NAME_IS_")) then
                    mreturn evaluateParameterNameIs(expression.Value, template, loops)

                ;;PROCESSED_ and REMAINING_
                else if ((loops.Count() > 0) && (expression.Value.Value.StartsWith("PROCESSED_EXCLUSIVE_")
                &    ||     expression.Value.Value.StartsWith("PROCESSED_INCLUSIVE_")
                &    ||     expression.Value.Value.StartsWith("REMAINING_EXCLUSIVE_") 
                &    ||     expression.Value.Value.StartsWith("REMAINING_INCLUSIVE_"))) then
                    mreturn evaluateLoopProgress(expression.Value, template, loops)

                ;;STRUCTURE_HAS_FIELD_
                else if (expression.Value.Value.StartsWith("STRUCTURE_HAS_FIELD_")) then
                begin
                    mreturn evaluateStructureHasField(expression.Value, template, loops)
                end

                ;;TOTAL_ITEMS_
                else if ((loops.Count() > 0) && (expression.Value.Value.StartsWith("TOTAL_ITEMS_"))) then
                    mreturn evaluateLoopTotalItems(expression.Value, template, loops)
                
                ;;No match!
                else
                    throw new ApplicationException(noEvaluatorMessage())
            end

            data findAndRunEvaluator, @Func<Dictionary<string, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>, boolean>, doFindAndRunEvaluator

            using currentContext select
            (TokenType.Generic),
                mreturn findAndRunEvaluator(genericExpressionEvaluators)
            (TokenType.NotInLoop),
                mreturn findAndRunEvaluator(notInLoopExpressionEvaluators)
            (TokenType.LoopUtility), ;TODO: Bug? Not sure we can ever get here?
                mreturn findAndRunEvaluator(loopUtilityExpressionEvaluators)
            (TokenType.FieldLoop),
                mreturn findAndRunEvaluator(fieldLoopExpressionEvaluators)
            (TokenType.FieldSelectionLoop),
                mreturn findAndRunEvaluator(fieldSelectionLoopExpressionEvaluators)
            (TokenType.KeyLoop),
                mreturn findAndRunEvaluator(keyLoopExpressionEvaluators)
            (TokenType.KeySegmentLoop),
                mreturn findAndRunEvaluator(keySegmentLoopExpressionEvaluators)
            (TokenType.EnumLoop),
                mreturn findAndRunEvaluator(enumLoopExpressionEvaluators)
            (TokenType.EnumMemberLoop),
                mreturn findAndRunEvaluator(enumMemberLoopExpressionEvaluators)
            (TokenType.RelationLoop),
                mreturn findAndRunEvaluator(relationLoopExpressionEvaluators)
            (TokenType.RelationSegmentLoop),
                mreturn findAndRunEvaluator(relationSegmentLoopExpressionEvaluators)
            (TokenType.ButtonLoop),
                mreturn findAndRunEvaluator(buttonLoopExpressionEvaluators)
            (TokenType.FileLoop),
                mreturn findAndRunEvaluator(fileLoopExpressionEvaluators)
            (TokenType.TagLoop),
                mreturn findAndRunEvaluator(tagLoopExpressionEvaluators)
            (TokenType.StructureLoop),
                mreturn findAndRunEvaluator(structureLoopExpressionEvaluators)
            (TokenType.InterfaceLoop),
                mreturn findAndRunEvaluator(interfaceLoopExpressionEvaluators)
            (TokenType.MethodLoop),
                mreturn findAndRunEvaluator(methodLoopExpressionEvaluators)
            (TokenType.ParameterLoop),
                mreturn findAndRunEvaluator(parameterLoopExpressionEvaluators)
            (),
                throw new ApplicationException(badEvaluationRequestMessage())
            endusing
		
        endmethod

        private method registerCustomEvaluators, void
            context, @CodeGenContext 
            endparams
        proc
            ;; Plug in any custom expression evaluators
            if ((context.CustomExpressionEvaluators != ^null) && (context.CustomExpressionEvaluators.Count > 0))
            begin
                data customEvaluator, @Tuple<string, string, TokenValidity, Func<Token, FileNode, IEnumerable<LoopNode>, boolean>>
                foreach customEvaluator in context.CustomExpressionEvaluators
                begin
                    using (customEvaluator.Item3) select
                    (TokenValidity.Anywhere),
                        genericExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.AnyLoop),
                        loopUtilityExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.FieldLoop),
                        fieldLoopExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.FieldSelectionLoop),
                        fieldSelectionLoopExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.KeyLoop),
                        keyLoopExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.KeySegmentLoop),
                        keySegmentLoopExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.EnumLoop),
                        enumLoopExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.EnumMemberLoop),
                        enumMemberLoopExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.RelationLoop),
                        relationLoopExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.RelationSegmentLoop),
                        relationSegmentLoopExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.TagLoop),
                        tagLoopExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.FileLoop),
                        fileLoopExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.ButtonLoop),
                        buttonLoopExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.StructureLoop),
                        structureLoopExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.NotInLoop),
                        notInLoopExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.InterfaceLoop),
                        interfaceLoopExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.MethodLoop),
                        methodLoopExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    (TokenValidity.ParameterLoop),
                        parameterLoopExpressionEvaluators.Add(customEvaluator.Item1, customEvaluator.Item4)
                    endusing
                end
            end
        endmethod

    endclass

endnamespace
