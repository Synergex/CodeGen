<!DOCTYPE html>
<html>
<head lang="en">
<title>Processing GROUP Fields</title>
<meta charset="UTF-8" />
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1" />
<meta name="generator" content="HelpSmith 10.1 (Build 24.1202)" />
<link type="text/css" rel="stylesheet" href="../css/tree.css?b1fab730" />
<link type="text/css" rel="stylesheet" href="../css/topics.css?67b3301d" />
<link type="text/css" rel="stylesheet" href="../css/apr.css?67b3301d" />
<link type="text/css" rel="stylesheet" href="../css/app.css?67b3301d" />
<script src="../js/jquery-3.7.1.min.js"></script>
<script src="../js/tree.min.js?b1fab730"></script>
<script src="../js/tabs.min.js?b1fab730"></script>
<script src="../js/jquery.cookie.js?b1fab730"></script>
<script src="../js/headroom.min.js?b1fab730"></script>
<script src="../js/app.min.js?b1fab730"></script>
<script src="../js/search.min.js?b1fab730"></script>
<!-- Web Help Topic -->
  
<!-- HTML Help (CHM) Topic -->
<script>
doAppStart();
</script>
</head>
<body>
	<header>
		<div id="hs-header-d">
			<div id="hs-content-h">
  <div id="hs-wrapper-h">
    <span id="hs-title-h">CodeGen Documentation</span>
  </div>
</div>
		</div>
		<div id="hs-header-m">
			<div id="hs-content-m">
  <div id="hs-area-left">
    <div id="hs-menu" class="hs-menu-toggle">
      <span class="line1"></span>
      <span class="line2"></span>
      <span class="line3"></span>
    </div>
  </div>
  <div id="hs-area-center">
    <span id="hs-title-m">CodeGen Documentation</span>
  </div>
  <div id="hs-area-right"></div>
</div>
		</div>
	</header>
	<nav id="hs-nav">
		<div id="hs-nav-content">
			<ul id="nav-tabs" role="tablist">
				<li class="hs-toc-tab" role="tab">
					<a href="#hs-toc-panel">Contents</a>
				</li>
				<li class="hs-index-tab" role="tab">
					<a href="#hs-index-panel">Index</a>
				</li>
				<li class="hs-search-tab" role="tab">
					<a href="#hs-search-panel">Search</a>
				</li>
			</ul>
			<div id="tabs-panels">
				<div class="hstabs-panel" id="hs-toc-panel" role="tabpanel">
					<div id="toc-tree" class="hs-tree"></div>
				</div>
				<div class="hstabs-panel" id="hs-index-panel" role="tabpanel">
					<div class="hs-index-content">
						<div id="kwd-search-box">
							<label for="kwd-search" class="sfield-title text-label">Type in the keyword(s) to find:</label>
							<input type="text" id="kwd-search" autocomplete="off" />
						</div>
						<div id ="index-tree" class="hs-tree"></div>
					</div>
				</div>
				<div class="hstabs-panel" id="hs-search-panel" role="tabpanel">
					<div id="hs-search-content">
						<div id="search-form">
							<label for="squery" class="sfield-title text-label">Type in the keyword(s) to find:</label>
							<div id="search-box">
								<div class="search-container">
									<input type="text" id="squery" autocomplete="off">
								</div>
								<div class="search-btn" title="Search"></div>
							</div>
							<div id="options-box">
								<span class="text-label">Match:</span>
								<input type="radio" id="anywords" name="match" value="anywords" checked="checked"><label for="anywords" class="text-label">Any words</label>
								<input type="radio" id="phrase" name="match" value="phrase"><label for="phrase" class="text-label">Phrase</label>
							</div>
						</div>
						<div id="search-result"></div>
					</div>
				</div>
			</div>
		</div>
		</nav>
		<div id="hs-content">
			<main>
				<article>
					<div id="topic-content">
  <div id="nsa-box" class="nsa-content0">
    <h1 class="hd0"><span class="ts0">Processing GROUP Fields</span></h1>
  </div>
  <div id="sa-box">
    <div id="content-box" class="sa-content0">
      <p class="ps0"><span class="ts1">&nbsp;</span></p>
      <h2 class="hd0"><span class="ts2">Understanding GROUP Fields</span></h2>
      <p><span class="ts4">The </span><a href="https://www.synergex.com/docs/versions/v111/index.htm#lrm/lrmChap4GROUPENDGROUP.htm" target="_blank" class="hs3">GROUP</a><span class="ts4">&nbsp;statement defines a data structure within a record or another group structure. The ENDGROUP statement indicates the end of a group declaration. A group name must be unique among all other field and group names within a parent group. If a group isn&rsquo;t part of another group, its name must be unique within the record. Here is an example of a record containing several groups:</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">record info</span></p>
      <p class="ps19"><span class="ts5">&nbsp; group customer&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,[100]a</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,a30</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; group office&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,a</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bldg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,a20</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; group address&nbsp;&nbsp; ,a</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; street&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,a40</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; zip&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,d10</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endgroup</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; endgroup</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; group contact&nbsp;&nbsp;&nbsp;&nbsp; ,a</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,a40</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; group address&nbsp;&nbsp; ,a</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; street&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,a40</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; zip&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,d10</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endgroup</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; endgroup</span></p>
      <p class="ps19"><span class="ts5">&nbsp; endgroup</span><br /><span class="ts5">endrecord</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <h2 class="hd0"><span class="ts2">Overlay Groups</span></h2>
      <p><span class="ts4">Group fields can also be used to define overlays. By default, CodeGen excludes overlays when processing, and that included the exclusion of overlay groups. However, if the -f o command line option is used to cause overlays to be included when processing, then overlay groups will also be included. When processing in a field loop you can detect whether an unexpanded overlay group is being processed by using the </span><a href="fieldloopexpressiontokens.htm#GROUP_OVERLAY" class="hs3">&lt;IF GROUP_OVERLAY&gt;</a><span class="ts4">&nbsp;expression.</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <h2 class="hd0"><span class="ts2">Implicit and Explicit Groups</span></h2>
      <p><span class="ts4">While DBL has only one type of group, Repository allows you to define groups in two ways. These are referred to as &quot;explicit groups&quot; and &quot;implicit groups&quot;. An explicit group is a group where the group members are defined explicitly within the definition of the group, all within the same structure. An implicit group is a group where the members of the group are defined by the members of a different structure.</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <h2 class="hd0"><span class="ts2">Group Member Prefix</span></h2>
      <p><span class="ts4">When a field is declared as a GROUP it is possible to also provide a &quot;member prefix&quot;, which is a value to be pre-pended to the names of all fields in the group. By default, CodeGen will use any prefix specified, but if you prefer not to use the prefix when generating code then that behavior can be suppressed by specifying the </span><a href="commandlinereference.htm#option_g" class="hs3">-g f</a><span class="ts4">&nbsp;command line option.</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">When processing groups, you can determine whether a group member prefix is present by using the </span><a href="fieldloopexpressiontokens.htm#GROUP_MEMBER_PREFIX" class="hs3">&lt;IF GROUP_MEMBER_PREFIX&gt;</a><span class="ts4">&nbsp;expression, and you can access the prefix value with the </span><a href="fieldloopexpansiontokens.htm#FIELD_GROUP_MEMBER_PREFIX" class="hs3">&lt;FIELD_GROUP_MEMBER_PREFIX&gt;</a><span class="ts4">&nbsp;expansion token.</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <h2 class="hd0"><span class="ts2">How CodeGen Processes Groups</span></h2>
      <p><span class="ts4">Under normal circumstances, whenever CodeGen encounters a GROUP field in a structure, it expands the group into individual fields. So, if a structure contains a group that has ten member fields, then the group field is removed from the structure and ten individual fields are added in its place. And if a group contains other &quot;nested&quot; groups, then the same process is applied to those fields also.&nbsp; For example, given the following structure:</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">structure customer</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; customer_id,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a10</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; company_name,&nbsp;&nbsp;&nbsp;&nbsp; a40</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; group address,&nbsp;&nbsp;&nbsp; a</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; street,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a30</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; city,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a20</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; state,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a2</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; zip,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d5</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; endgroup</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; phone,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d10</span></p>
      <p class="ps19"><span class="ts5">endstructure</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">If you use the &lt;field_name&gt; token to access the field names in a </span><a href="fieldloops.htm" class="hs1">field loop</a><span class="ts4">, you would see field names like this: </span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">customer_id</span></p>
      <p class="ps19"><span class="ts5">company_name</span></p>
      <p class="ps19"><span class="ts5">address.street</span></p>
      <p class="ps19"><span class="ts5">address.city</span></p>
      <p class="ps19"><span class="ts5">address.state</span></p>
      <p class="ps19"><span class="ts5">address.zip</span></p>
      <p class="ps19"><span class="ts5">phone</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">If you use the &lt;field_sqlname&gt; token to access the field names in a </span><a href="fieldloops.htm" class="hs3">field loop</a><span class="ts4">, you would see field names like this: </span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">customer_id</span></p>
      <p class="ps19"><span class="ts5">company_name</span></p>
      <p class="ps19"><span class="ts5">address_street</span></p>
      <p class="ps19"><span class="ts5">address_city</span></p>
      <p class="ps19"><span class="ts5">address_state</span></p>
      <p class="ps19"><span class="ts5">address_zip</span></p>
      <p class="ps19"><span class="ts5">phone</span></p>
      <p class="ps0"><span class="ts1">&nbsp;</span></p>
      <h2 class="hd0"><span class="ts2">Controlling Group Expansion</span></h2>
      <p><span class="ts4">If you prefer to not have group fields expanded during code generation then you can control that behavior, for both explicit and implicit groups, via two command-line options. The </span><a href="commandlinereference.htm#option_g" class="hs3">-g e</a><span class="ts4">&nbsp;option prevents explicit groups from being expanded, and the </span><a href="commandlinereference.htm#option_g" class="hs3">-g i</a><span class="ts4">&nbsp;option prevents the expansion of implicit groups.</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">When you use these options the original group field remains in the structure, and the values of some field loop tokens is altered for those fields. When processing a field loop you can detect whether groups are or are not being expanded using expression tokens </span><a href="fieldloopexpressiontokens.htm#EXPLICIT_GROUP_NO_EXPAND" class="hs3">&lt;IF EXPLICIT_GROUP_NO_EXPAND&gt;</a><span class="ts4">&nbsp;and </span><a href="fieldloopexpressiontokens.htm#IMPLICIT_GROUP_NO_EXPAND" class="hs3">&lt;IF IMPLICIT_GROUP_NO_EXPAND&gt;</a><span class="ts4">, and you can detect unexpanded group fields with expressions like </span><a href="fieldloopexpressiontokens.htm#GROUP" class="hs3">&lt;IF GROUP&gt;</a><span class="ts4">, </span><a href="fieldloopexpressiontokens.htm#EXPLICIT_GROUP" class="hs3">&lt;IF EXPLICIT_GROUP&gt;</a><span class="ts4">, </span><a href="fieldloopexpressiontokens.htm#IMPLICIT_GROUP" class="hs3">&lt;IF IMPLICIT_GROUP&gt;</a><span class="ts4">&nbsp;and </span><a href="fieldloopexpressiontokens.htm#GROUP_OVERLAY" class="hs3">&lt;IF GROUP_OVERLAY&gt;</a><span class="ts4">. And when processing an unexpanded implicit group, you can refer to the name of the structure that defines the members of the group via the </span><a href="fieldloopexpansiontokens.htm#FIELD_GROUP_STRUCTURE" class="hs3">&lt;FIELD_GROUP_STRUCTURE&gt;</a><span class="ts4">&nbsp;token.</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <h2 class="hd0"><span class="ts2">Generating Code for Unexpanded Groups</span></h2>
      <p><span class="ts4">This is a complex subject, and one for which there are likely to be many different scenarios, and different requirements, but here is one example, based on the following structure:</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">structure CUSTOMER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp; CUSTOMER_ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,D8&nbsp;&nbsp; ; Customer ID&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp; COMPANY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A40&nbsp; ; Company name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp; group BILLING_ADDRESS&nbsp; ,A&nbsp;&nbsp;&nbsp; ; Billing address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; STREET&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A30&nbsp; ; Street address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; CITY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A20&nbsp; ; City&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; STATE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A2&nbsp;&nbsp; ; State&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; ZIP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,D5&nbsp;&nbsp; ; Zip code&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp; endgroup&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; </span></p>
      <p class="ps19"><span class="ts5">&nbsp; group SHIPPING_ADDRESS ,A&nbsp;&nbsp;&nbsp; ; Shipping address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; STREET&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A30&nbsp; ; Street address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; CITY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A20&nbsp; ; City&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; STATE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A2&nbsp;&nbsp; ; State&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; ZIP&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,D5&nbsp;&nbsp; ; Zip code&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp; endgroup&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; </span></p>
      <p class="ps19"><span class="ts5">&nbsp; group PRIMARY_CONTACT&nbsp; ,A&nbsp;&nbsp;&nbsp; ; Primary contact name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; FIRST_NAME&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A15&nbsp; ; First name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; MIDDLE_INITIAL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A1&nbsp;&nbsp; ; Middle initial&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; LAST_NAME&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A15&nbsp; ; Last name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp; endgroup&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; </span></p>
      <p class="ps19"><span class="ts5">&nbsp; group BILLING_CONTACT&nbsp; ,A&nbsp;&nbsp;&nbsp; ; Billing contact&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; FIRST_NAME&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A15&nbsp; ; First name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; MIDDLE_INITIAL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A1&nbsp;&nbsp; ; Middle initial&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; LAST_NAME&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A15&nbsp; ; Last name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp; endgroup&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; </span></p>
      <p class="ps19"><span class="ts5">&nbsp; group SHIPPING_CONTACT ,A&nbsp;&nbsp;&nbsp; ; shipping contact&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; FIRST_NAME&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A15&nbsp; ; First name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; MIDDLE_INITIAL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A1&nbsp;&nbsp; ; Middle initial&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; LAST_NAME&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,A15&nbsp; ; Last name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
      <p class="ps19"><span class="ts5">&nbsp; endgroup&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ; </span></p>
      <p class="ps19"><span class="ts5">endstructure</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">In the repository, the groups BILLING_ADDRESS and SHIPPING_ADDRESS are defined as IMPLICIT groups, their fields being defined by a second structure named ADDRESS. Whereas the groups PRIMARY_CONTACT, BILLING_CONTACT and SHIPPING_CONTACT are all defined as explicit groups, i.e. their member fields are defined LOCALLY within the CUSTOMER structure</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">If we wanted to generate a Synergy .NET class to represent this structure, we might use a template like this:</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">namespace &lt;NAMESPACE&gt;</span></p>
      <p class="ps19"><br /><span class="ts5">&nbsp;&nbsp;&nbsp; public class &lt;StructureName&gt;</span></p>
      <p class="ps19"><br /><span class="ts5">&lt;FIELD_LOOP&gt;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property &lt;FieldSqlName&gt;, &lt;FIELD_SNTYPE&gt;</span></p>
      <p class="ps19"><span class="ts5">&lt;/FIELD_LOOP&gt;</span></p>
      <p class="ps19"><br /><span class="ts5">&nbsp;&nbsp;&nbsp; endclass</span></p>
      <p class="ps19"><br /><span class="ts5">endnamespace</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">And we might use a codegen command like this:</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">codegen -t grouptest -s customer -n MyNamespace</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">And the output would be something like this:</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">namespace MyNamespace</span></p>
      <p class="ps19"><br /><span class="ts5">&nbsp;&nbsp;&nbsp; public class Customer</span></p>
      <p class="ps19"><br /><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property CustomerId, int</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property Company, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property BillingAddressStreet, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property BillingAddressCity, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property BillingAddressState, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property BillingAddressZip, int</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property ShippingAddressStreet, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property ShippingAddressCity, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property ShippingAddressState, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property ShippingAddressZip, int</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property PrimaryContactFirstName, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property PrimaryContactMiddleInitial, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property PrimaryContactLastName, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property BillingContactFirstName, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property BillingContactMiddleInitial, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property BillingContactLastName, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property ShippingContactFirstName, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property ShippingContactMiddleInitial, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property ShippingContactLastName, String</span></p>
      <p class="ps19"><br /><span class="ts5">&nbsp;&nbsp;&nbsp; endclass</span></p>
      <p class="ps19"><br /><span class="ts5">endnamespace</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">But what if we didn't want to expand the groups into individual properties. What happens if we add the command line options to tell CodeGen not to expand explicit and implicit groups, like this:</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">codegen -t grouptest -s customer -n MyNamespace -g e i</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">Well, we wind up with this:</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">namespace MyNamespace</span></p>
      <p class="ps19"><br /><span class="ts5">&nbsp;&nbsp;&nbsp; public class Customer</span></p>
      <p class="ps19"><br /><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property CustomerId, int</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property Company, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property BillingAddress, @ADDRESS</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property ShippingAddress, @ADDRESS</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property PrimaryContact, @PRIMARY_CONTACT</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property BillingContact, @BILLING_CONTACT</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property ShippingContact, @SHIPPING_CONTACT</span></p>
      <p class="ps19"><br /><span class="ts5">&nbsp;&nbsp;&nbsp; endclass</span></p>
      <p class="ps19"><br /><span class="ts5">endnamespace</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">As you can see, the group fields were not expanded, and the data type produced for the unexpanded groups by the </span><a href="fieldloopexpansiontokens.htm#FIELD_SNTYPE" class="hs3">&lt;FIELD_SNTYPE&gt;</a><span class="ts4">&nbsp;token became a class reference. In the case of the two implicit group fields, BILLING_ADDRESS and SHIPPING_ADDRESS, the type refers to a class defined by the name of the other structure that was used to define the group members, and in the case of the three explicit groups, the type refers to a class based on the name of the original group field.</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">This code may or may not compile, depending on whether the three other classed being referred to actually exist or not. Let's explore how we can leverage the functionality of the special </span><a href="fieldloopexpansiontokens.htm#FIELD_GROUP_EXPAND" class="hs3">&lt;FIELD_GROUP_EXPAND&gt;</a><span class="ts4">&nbsp;token to enhance out template:</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">namespace &lt;NAMESPACE&gt;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; public class &lt;StructureName&gt;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">&lt;FIELD_LOOP&gt;</span></p>
      <p class="ps19"><span class="ts5">&nbsp; </span><span class="ts36">&lt;IF GROUP&gt;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; </span><span class="ts37">&lt;IF IMPLICIT_GROUP&gt;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property &lt;FieldSqlName&gt;, @&lt;FIELD_GROUP_STRUCTURE&gt;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; </span><span class="ts37">&lt;ELSE&gt;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class &lt;FieldName&gt;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts38">&lt;FIELD_GROUP_EXPAND&gt;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endclass</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property &lt;FieldSqlName&gt;, @&lt;FieldName&gt;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; </span><span class="ts37">&lt;/IF IMPLICIT_GROUP&gt;</span></p>
      <p class="ps19"><span class="ts5">&nbsp; </span><span class="ts36">&lt;ELSE&gt;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property &lt;FieldSqlName&gt;, &lt;FIELD_SNTYPE&gt;</span></p>
      <p class="ps19"><span class="ts5">&nbsp; </span><span class="ts36">&lt;/IF GROUP&gt;</span></p>
      <p class="ps19"><span class="ts5">&lt;/FIELD_LOOP&gt;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; endclass</span></p>
      <p class="ps19"><span class="ts5">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">endnamespace</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">This template is a little hard to explain, so we'll break down the most important parts of the template one at a time:</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p class="ps21"><span style="font-family: Tahoma; font-size: 10pt; color: Black">1.</span><span style="display: inline-block; width: 13px"></span><span class="ts4">Within the field loop, notice that the first thing we do is use an </span><a href="fieldloopexpressiontokens.htm#GROUP" class="hs3">&lt;IF GROUP&gt;</a><span class="ts4">&nbsp;expression to give us a place to do special things for unexpanded groups, and the associated &lt;ELSE&gt; clause provides a place for the code for regular, non-group fields. In fact the code in that &lt;ELSE&gt; clause is the same code that we had in our original template, so for non-group fields we will continue to produce a public read-write property.</span></p>
      <p class="ps21"><span style="font-family: Tahoma; font-size: 10pt; color: Black">2.</span><span style="display: inline-block; width: 13px"></span><span class="ts4">In the unexpanded group section of the field loop, notice how the next thing we do is use the </span><a href="fieldloopexpressiontokens.htm#IMPLICIT_GROUP" class="hs3">&lt;IF EXPLICIT_GROUP&gt;</a><span class="ts4">&nbsp;expression, and it's associated &lt;ELSE&gt; clause, to allow us to generate different code for implicit groups and explicit groups.</span></p>
      <p class="ps21"><span style="font-family: Tahoma; font-size: 10pt; color: Black">3.</span><span style="display: inline-block; width: 13px"></span><span class="ts4">For implicit groups we generate a read-write property and type it using the </span><a href="fieldloopexpansiontokens.htm#FIELD_GROUP_STRUCTURE" class="hs3">&lt;FIELD_GROUP_STRUCTURE&gt;</a><span class="ts4">&nbsp;token. This will result in a reference to the other structure that defines the members for the group.</span></p>
      <p class="ps21"><span style="font-family: Tahoma; font-size: 10pt; color: Black">4.</span><span style="display: inline-block; width: 13px"></span><span class="ts4">For explicit groups we do a little more; we output the code for a nested class (a class within a class, just like a group is kind of like a record within a record), named after the original explicit group field, and we also emit a public property whose type is defined by that new nested class.</span></p>
      <p class="ps21"><span style="font-family: Tahoma; font-size: 10pt; color: Black">5.</span><span style="display: inline-block; width: 13px"></span><span class="ts4">&nbsp;This is where it gets complicated. Notice that the body of the nested class contains a single token called </span><a href="fieldloopexpansiontokens.htm#FIELD_GROUP_EXPAND" class="hs3">&lt;FIELD_GROUP_EXPAND&gt;</a><span class="ts4">, which is a very special token that behaves very differently to most other field loop expansion tokens. Essentially what it does is &quot;replay&quot; the entire body of the field loop that contains it, but for the members of the current group field. If the group field only contains fields as members, then the nested class will simply contain public properties for those fields, but if the group contains members that are other groups, then the exact same process will occur, and on, and on, until all fields have been processed.</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">So, if we process this template, using the exact same CodeGen command that we used last time, the output will look like this:</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p class="ps25"><span class="ts5">namespace MyNamespace</span></p>
      <p class="ps19"><span class="ts5">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; public class Customer</span></p>
      <p class="ps19"><span class="ts5">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property CustomerId, int</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property Company, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts36">public readwrite property BillingAddress, @ADDRESS</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property ShippingAddress, @ADDRESS</span></p>
      <p class="ps19"><span class="ts5">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="ts38">public class PrimaryContact</span></p>
      <p class="ps19"><span class="ts38">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property FirstName, String</span></p>
      <p class="ps19"><span class="ts38">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property MiddleInitial, String</span></p>
      <p class="ps19"><span class="ts38">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property LastName, String</span></p>
      <p class="ps19"><span class="ts38">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endclass</span></p>
      <p class="ps19"><span class="ts38">&nbsp;</span></p>
      <p class="ps19"><span class="ts38">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property PrimaryContact, @PrimaryContact</span></p>
      <p class="ps19"><span class="ts5">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class BillingContact</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property FirstName, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property MiddleInitial, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property LastName, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endclass</span></p>
      <p class="ps19"><span class="ts5">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property BillingContact, @BillingContact</span></p>
      <p class="ps19"><span class="ts5">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public class ShippingContact</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property FirstName, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property MiddleInitial, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property LastName, String</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endclass</span></p>
      <p class="ps19"><span class="ts5">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public readwrite property ShippingContact, @ShippingContact</span></p>
      <p class="ps19"><span class="ts5">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">&nbsp;&nbsp;&nbsp; endclass</span></p>
      <p class="ps19"><span class="ts5">&nbsp;</span></p>
      <p class="ps19"><span class="ts5">endnamespace</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">As you can see, the regular fields in the structure are exposed as public properties, the implicit groups are exposed as class references to an externally defined class, presumably code-generated separately using a different template, and the explicit groups are implemented as nested classes exposed via public properties.</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">By the way, if you were to process this token without the </span><a href="commandlinereference.htm#option_g" class="hs3">-g e i</a><span class="ts4">&nbsp;command line options, it would produce the exact same content as the original template, because there would not be any unexpended group fields present.</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">And I should also mention that if you use the sample templates from this article, the output won't be exactly as shown here; we are still working on how to get appropriate indentation when we iterate through multiple levels of groups with a single expansion token, so for the time being the code may look a little onorganized, but that's nothing that a quick CTRL+K+D in the Visual Studio editor can't fix!</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <p><span class="ts4">&nbsp;</span></p>
      <div class="hr-wrapper">
        <hr class="hline1" />
      </div>
      <p class="ps11"><span class="ts11">Copyright &copy; 2021&nbsp; Synergex International, Inc.</span></p>
    </div>
  </div>
</div>
				</article>
			</main>
		</div>
		<footer>
			<div id="hs-footer"><div id="hs-content-f">
  <div id="hs-wrapper-f">
    <span id="hs-title-f">Copyright &copy; 2021  Synergex International, Inc.</span>
  </div>
</div></div>
		</footer>
</body>
</html>