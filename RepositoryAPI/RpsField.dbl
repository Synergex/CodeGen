;;*****************************************************************************
;;
;; Title:       RpsField.dbl
;;
;; Type:        Class
;;
;; Description: Represents a single Repository field definition
;;
;; Date:        19th October 2007
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import CodeGen.RepositoryAPI
import Newtonsoft.Json
import Newtonsoft.Json.Converters
import System.Collections
import System.Collections.Generic
import System.ComponentModel

namespace CodeGen.RepositoryAPI

    ;;; <summary>
    ;;; Represents a Repository field
    ;;; </summary>
    public partial class RpsField

        protected mRepository, @Repository

        public override method ToString, String
            endparams
        proc
            mreturn String.Format("RpsField: {0}",this.OriginalName)
        endmethod

        protected mf_info, f_info

        ;;; <summary>
        ;;; Constructs a new field based on the name of a structure and a field.
        ;;; </summary>
        ;;; <param name="StructureName">Name of the structure containing the field.</param>
        ;;; <param name="FieldName">Name of the field.</param>
        ;;; <param name="UseAlternateName">Should the fields alternate name be used as its actual name? (Default if false).</param>
        public method RpsField
            required in aRepository, @Repository
            required in StructureName, String
            required in FieldName, String
            default  in UseAlternateName, Boolean, false
            endparams
        proc
            mRepository = aRepository
            mRepository.CheckIsOpen()
            LoadField(StructureName,FieldName,UseAlternateName)
        endmethod

        ;;; <summary>
        ;;; Constructs a new field based on the name field in the current structure.
        ;;; </summary>
        ;;; <param name="FieldName">Name of the field.</param>
        ;;; <param name="UseAlternateName">Should the fields alternate name be used as its actual name? (Default if false).</param>
        public method RpsField
            required in aRepository, @Repository
            required in FieldName, String
            default  in UseAlternateName, Boolean, false
            endparams
        proc
            mRepository = aRepository
            LoadCurrentStructureField(FieldName,UseAlternateName)
        endmethod

        ;;; <summary>
        ;;; Constructs a new field by cloning an existing field.
        ;;; </summary>
        ;;; <param name="SourceField">Repository field to clone.</param>
        public method RpsField
            required in aRepository, @Repository
            required in SourceField, @RpsField
            endparams
        proc
            mRepository = aRepository
            cloneField(SourceField)
        endmethod

        ;; Destructor
        method ~RpsField
        proc
            clear this.AllowList, this.SelectionList, this.GroupFields
        endmethod

        ;;; <summary>
        ;;; Sets the current repository structure and loads information
        ;;; for a named field.
        ;;; </summary>
        ;;; <param name="StructureName">Repository structure name</param>
        ;;; <param name="FieldName">Name of field to load</param>
        ;;; <param name="UseAlternateName">Should the fields alternate name be used as its actual name? (Default if false).</param>
        private method LoadField, void
            required in StructureName, String
            required in FieldName, String
            default  in UseAlternateName, Boolean, false
        proc
            ;Set the current structure
            data ms_info, s_info
            dd_struct(mRepository.RpsControl,DDS_INFO,StructureName,ms_info)
            if (mRepository.RpsControl.error)
                throw new RpsFieldException("Failed to get information for repository structure "+StructureName)
            LoadCurrentStructureField(FieldName,UseAlternateName)
        endmethod

        ;;; <summary>
        ;;; Loads data for a named field in the current structure.
        ;;; </summary>
        ;;; <param name="FieldName">Name of field to load</param>
        ;;; <param name="UseAlternateName">Should the fields alternate name be used as its actual name? (Default if false).</param>
        private method LoadCurrentStructureField, void
            required in FieldName, String
            default  in UseAlternateName, Boolean, false
            endparams
        proc
            ;;Record the fields actual name
            data actualFieldName = FieldName.Trim().ToUpper()

            ;;Save the structure name
            this.StructureName = %atrim(mRepository.RpsControl.sname)
            
            ;;Load the field information structure
            dd_field(mRepository.RpsControl,DDF_INFO,actualFieldName,^a(mf_info))
            if (mRepository.RpsControl.error)
                throw new RpsFieldException("Failed to get repository information for structure " + this.StructureName +  " field " + actualFieldName)

            ;;Load the fields alternate name
            if (mf_info.fi_altnm) then
            begin
                data tmpalternateName, a30
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_altnm,tmpAlternateName)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get alternate name for repository field "+actualFieldName)
                this.AlternateName = %atrim(tmpalternateName)
            end
            else
            begin
                this.AlternateName = actualFieldName
            end

            ;;Save the field name
            if (UseAlternateName) then
                this.Name = this.AlternateName
            else
                this.Name = actualFieldName

            ;;Record the original name used, in case it changes later as a result of array or group expansion
            this.OriginalName = actualFieldName
            this.OriginalNameModified = actualFieldName
            this.BaseName = this.Name

            ;;Load extended data

            this.ArrayDimension = new int[4]
            this.ArrayDimension[1] = mf_info.fi_dim[1]
            this.ArrayDimension[2] = mf_info.fi_dim[2]
            this.ArrayDimension[3] = mf_info.fi_dim[3]
            this.ArrayDimension[4] = mf_info.fi_dim[4]

            ;;Load description
            if (mf_info.fi_desc)
            begin
                data tmpDescription, a40
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_desc,tmpDescription)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get description for repository field "+actualFieldName)
                this.Description = %atrim(tmpDescription)
            end

            ;;Load long description
            if (mf_info.fi_ldesc)
            begin
                data tmpLongDescription, a1800
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_ldesc,tmpLongDescription)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get long description for repository field "+actualFieldName)
                this.LongDescription = %atrim(tmpLongDescription)
            end

            ;;Load user defined field type
            if (mf_info.fi_usrtyp)
            begin
                data tmpUserFieldType, a30
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_usrtyp,tmpUserFieldType)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get user defined type for repository field "+actualFieldName)
                this.UserFieldType = %atrim(tmpUserFieldType)
            end

            ;;Load report heading
            if (mf_info.fi_heading)
            begin
                data tmpReportHeading, a40
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_heading,tmpReportHeading)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get report heading for repository field "+actualFieldName)
                this.ReportHeading = %atrim(tmpReportHeading)
            end

            ;;Load prompt
            if (mf_info.fi_prompt)
            begin
                data tmpPrompt, a80
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_prompt,tmpPrompt)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get prompt for repository field "+actualFieldName)
                this.Prompt = %atrim(tmpPrompt)
            end

            ;;Load help identifier
            if (mf_info.fi_help)
            begin
                data tmpHelpIdentifier, a80
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_help,tmpHelpIdentifier)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get help identifier for repository field "+actualFieldName)
                this.HelpIdentifier = %atrim(tmpHelpIdentifier)
            end

            ;;Load information line text
            if (mf_info.fi_infoln)
            begin
                data tmpInfoLineText, a80
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_infoln,tmpInfoLineText)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get information line text for repository field "+actualFieldName)
                this.InfoLineText = tmpInfoLineText
            end

            ;;Load user text string
            if (mf_info.fi_utext)
            begin
                data tmpUserText, a80
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_utext,tmpUserText)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get user text for repository field "+actualFieldName)
                this.UserText = %atrim(tmpUserText)
            end

            ;;Load field font
            if (mf_info.fi_font)
            begin
                data tmpFieldFont, a30
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_font,tmpFieldFont)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get field font for repository field "+actualFieldName)
                this.FieldFont = %atrim(tmpFieldFont)
            end

            ;;Load prompt font
            if (mf_info.fi_prmptfont)
            begin
                data tmpPromptFont, a30
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_prmptfont,tmpPromptFont)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get prompt font for repository field "+actualFieldName)
                this.PromptFont = %atrim(tmpPromptFont)
            end

            ;;Load default value
            if (mf_info.fi_def)
            begin
                data tmpDefaultValue, a80
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_def,tmpDefaultValue)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get default value for repository field "+actualFieldName)
                this.DefaultValue = %atrim(tmpDefaultValue)
            end

            ;;Load arrive method
            if (mf_info.fi_arrivemeth)
            begin
                data tmpArriveMethod, a30
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_arrivemeth,tmpArriveMethod)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get arrive method for repository field "+actualFieldName)
                this.ArriveMethod = %atrim(tmpArriveMethod)
            end

            ;;Load leave method
            if (mf_info.fi_leavemeth)
            begin
                data tmpLeaveMethod, a30
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_leavemeth,tmpLeaveMethod)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get leave method for repository field "+actualFieldName)
                this.LeaveMethod = %atrim(tmpLeaveMethod)
            end

            ;;Load drill method
            if (mf_info.fi_drillmeth)
            begin
                data tmpDrillMethod, a30
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_drillmeth,tmpDrillMethod)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get drill method for repository field "+actualFieldName)
                this.DrillMethod = %atrim(tmpDrillMethod)
            end

            ;;Load hyperlink method
            if (mf_info.fi_hypermeth)
            begin
                data tmpHyperlinkMethod, a30
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_hypermeth,tmpHyperlinkMethod)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get hyperlink method for repository field "+actualFieldName)
                this.HyperlinkMethod = %atrim(tmpHyperlinkMethod)
            end

            ;;Load change method
            if (mf_info.fi_changemeth)
            begin
                data tmpChangeMethod, a30
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_changemeth,tmpChangeMethod)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get change method for repository field "+actualFieldName)
                this.ChangeMethod = %atrim(tmpChangeMethod)
            end

            ;;Load display format method
            if (mf_info.fi_dispmeth)
            begin
                data tmpDisplayMethod, a30
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_dispmeth,tmpDisplayMethod)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get display method for repository field "+actualFieldName)
                this.DisplayMethod = %atrim(tmpDisplayMethod)
            end

            ;;Load edit format method
            if (mf_info.fi_editfmtmeth)
            begin
                data tmpEditFormatMethod, a30
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_editfmtmeth,tmpEditFormatMethod)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get edit format method for repository field "+actualFieldName)
                this.EditFormatMethod = %atrim(tmpEditFormatMethod)
            end

            ;;Load allowed value list (@ArrayList)
            if (mf_info.fi_alwlst&&mf_info.fi_alwct)
            begin
                data ListData, fti_entlst
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_alwlst,^a(ListData))
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get allow list entries for repository field "+actualFieldName)
                data idx, int
                for idx from 1 thru mf_info.fi_alwct
                    this.AllowList.Add((@a)ListData.fti_entlstary[idx])
            end

            ;;Load valid selections
            if (mf_info.fi_sellist&&mf_info.fi_selct)
            begin
                data ListData, fti_entlst
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_sellist,^a(ListData))
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get allow list entries for repository field "+actualFieldName)
                data idx, int
                for idx from 1 thru mf_info.fi_selct
                    this.SelectionList.Add((String)%atrim(ListData.fti_entlstary[idx]))
            end

            ;;Load numeric range values (fti_range)
            if (mf_info.fi_range)
            begin
                data mfti_range, fti_range
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_range,^a(mfti_range))
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get ranges for repository field "+actualFieldName)
                this.NumericRangeMinimum = mfti_range.fti_rgmin
                this.NumericRangeMaximum = mfti_range.fti_rgmax
            end

            ;;Load Toolkit enumeration data (fti_enum)
            if (mf_info.fi_enum)
            begin
                data mfti_enum, fti_enum
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_enum,^a(mfti_enum))
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get emumeration data for repository field "+actualFieldName)
                this.EnumeratedBaseValue = mfti_enum.fti_enmbase
                this.EnumeratedDisplayLength = mfti_enum.fti_enmlen
                this.EnumeratedStepValue = mfti_enum.fti_enmstep
            end

            ;;Load enumerated field name
            if ((mf_info.fi_type==T_INT)&&(mf_info.fi_class==C_ENUM)&&(mf_info.fi_enmfld))
            begin
                data tmpEnumName, a30
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_enmfld,tmpEnumName)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get emumeration name for repository field "+actualFieldName)
                this.EnumName = %atrim(tmpEnumName)
            end

            ;; Load display format string

            if (mf_info.fi_fmt)
            begin
                ;;Is the format defined in the structure?
                data formatType, a1
                data formatString, a30
                xcall dd_format(mRepository.RpsControl,DDM_SINFO,mf_info.fi_fmt,formatType,formatString)

                if (!mRepository.RpsControl.error) then
                    this.FormatString = %atrim(formatString)
                else
                begin
                    ;;Maybe it's a "global" or "pre-defined" format?
                    xcall dd_format(mRepository.RpsControl,DDM_INFO,mf_info.fi_fmt,formatType,formatString)
                    if (!mRepository.RpsControl.error)
                        this.FormatString = %atrim(formatString)
                end
            end

            ;; Things below here are unique to fields (not included in templates)

            ;;Load a struct fields structure name
            if ((mf_info.fi_type=="A")&&(mf_info.fi_class==C_STRFLD))
            begin
                data tmpStructFieldStructure, a30
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_strfld,tmpStructFieldStructure)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get structure for repository struct field "+actualFieldName)
                this.StructFieldStructure = %atrim(tmpStructFieldStructure)
            end

            ;;Load group structure name
            if (mf_info.fi_struct)
            begin
                data tmpGroupStructure, a30
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_struct,tmpGroupStructure)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get group structure for repository field "+actualFieldName)
                this.GroupStructure = %atrim(tmpGroupStructure)
            end

            ;;Load group member prefix
            if (mf_info.fi_prefix)
            begin
                data tmpGroupMemberPrefix, a30
                dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_prefix,tmpGroupMemberPrefix)
                if (mRepository.RpsControl.error)
                    throw new RpsFieldException("Failed to get group prefix for repository field "+actualFieldName)
                this.GroupMemberPrefix = %atrim(tmpGroupMemberPrefix)
            end

            ;;Is this field a group?
            if (mf_info.fi_group)
            begin
                ;;Yes, it it an implicit or explicit group?
                if (mf_info.fi_struct) then
                begin
                    ;;It's an implicit group, get the implicit group structure name
                    data implicitGroupStructure, a30
                    dd_field(mRepository.RpsControl,DDF_TEXT,mf_info.fi_struct,implicitGroupStructure)
                    this.GroupFields = new RpsFieldCollection(mRepository,RpsFieldCollectionMode.Structure,implicitGroupStructure,UseAlternateName)
                end
                else
                begin
                    ;;It's an explicit group
                    this.GroupFields = new RpsFieldCollection(mRepository,RpsFieldCollectionMode.Group,actualFieldName,UseAlternateName)
                end
            end

            ;;Load the fields coerced type
            using mf_info.fi_type select
            (T_DEC),
            begin
                using mf_info.fi_class select
                (C_YYMMDD,C_YYYYMMDD,C_YYJJJ,C_YYYYJJJ,C_YYPP,C_YYYYPP,C_HHMMSS,C_HHMM),
                begin
                    using mf_info.fi_coertype select
                    (CT_DATETIME),
                        this.CoercedType = RpsFieldCoercedType.CtNone
                    (CT_NULLDATETIME),
                        this.CoercedType = RpsFieldCoercedType.CtNullDateTime
                    endusing
                end
                (),
                begin
                    if (mf_info.fi_prec) then
                    begin
                        using mf_info.fi_coertype select
                        (CT_DECIMAL),
                            this.CoercedType = RpsFieldCoercedType.CtNone
                        (CT_DOUBLE),
                            this.CoercedType = RpsFieldCoercedType.CtDouble
                        (CT_FLOAT),
                            this.CoercedType = RpsFieldCoercedType.CtFloat
                        endusing
                    end
                    else
                    begin
                        using mf_info.fi_coertype select
                        (CT_DEFAULT),
                            this.CoercedType = RpsFieldCoercedType.CtNone
                        (CT_BYTE),
                            this.CoercedType = RpsFieldCoercedType.CtByte
                        (CT_SHORT),
                            this.CoercedType = RpsFieldCoercedType.CtShort
                        (CT_INT),
                            this.CoercedType = RpsFieldCoercedType.CtInt
                        (CT_LONG),
                            this.CoercedType = RpsFieldCoercedType.CtLong
                        (CT_SBYTE),
                            this.CoercedType = RpsFieldCoercedType.CtSbyte
                        (CT_USHORT),
                            this.CoercedType = RpsFieldCoercedType.CtUshort
                        (CT_UINT),
                            this.CoercedType = RpsFieldCoercedType.CtUint
                        (CT_ULONG),
                            this.CoercedType = RpsFieldCoercedType.CtUlong
                        (CT_BOOLEAN),
                            this.CoercedType = RpsFieldCoercedType.CtBoolean
                        endusing
                    end
                end
                endusing
            end
            (T_INT),
            begin
                using mf_info.fi_coertype select
                (CT_DEFAULT),
                    this.CoercedType = RpsFieldCoercedType.CtNone
                (CT_BYTE),
                    this.CoercedType = RpsFieldCoercedType.CtByte
                (CT_SHORT),
                    this.CoercedType = RpsFieldCoercedType.CtShort
                (CT_INT),
                    this.CoercedType = RpsFieldCoercedType.CtInt
                (CT_LONG),
                    this.CoercedType = RpsFieldCoercedType.CtLong
                (CT_SBYTE),
                    this.CoercedType = RpsFieldCoercedType.CtSbyte
                (CT_USHORT),
                    this.CoercedType = RpsFieldCoercedType.CtUshort
                (CT_UINT),
                    this.CoercedType = RpsFieldCoercedType.CtUint
                (CT_ULONG),
                    this.CoercedType = RpsFieldCoercedType.CtUlong
                (CT_BOOLEAN),
                    this.CoercedType = RpsFieldCoercedType.CtBoolean
                endusing
            end
            (),
                this.CoercedType = RpsFieldCoercedType.CtNone
            endusing

            ;;Load additional CodeGen specific data
            loadCodeGenData()

        endmethod

        private method cloneField, void
            required in SourceField, @RpsField
            endparams
        proc
            this.StructureName           = SourceField.StructureName
            mf_info                      = SourceField.FieldData
            this.Name                    = SourceField.Name
            this.AlternateName           = SourceField.AlternateName
            this.Description             = SourceField.Description
            this.LongDescription         = SourceField.LongDescription
            this.UserFieldType           = SourceField.UserFieldType
            this.ReportHeading           = SourceField.ReportHeading
            this.Prompt                  = SourceField.Prompt
            this.HelpIdentifier          = SourceField.HelpIdentifier
            this.InfoLineText            = SourceField.InfoLineText
            this.UserText                = SourceField.UserText
            this.FieldFont               = SourceField.FieldFont
            this.PromptFont              = SourceField.PromptFont
            this.DefaultValue            = SourceField.DefaultValue
            this.ArriveMethod            = SourceField.ArriveMethod
            this.LeaveMethod             = SourceField.LeaveMethod
            this.DrillMethod             = SourceField.DrillMethod
            this.HyperlinkMethod         = SourceField.HyperlinkMethod
            this.ChangeMethod            = SourceField.ChangeMethod
            this.DisplayMethod           = SourceField.DisplayMethod
            this.EditFormatMethod        = SourceField.EditFormatMethod
            this.NumericRangeMinimum     = SourceField.NumericRangeMinimum
            this.NumericRangeMaximum     = SourceField.NumericRangeMaximum
            this.EnumeratedDisplayLength = SourceField.EnumeratedDisplayLength
            this.EnumeratedBaseValue     = SourceField.EnumeratedBaseValue
            this.EnumeratedStepValue     = SourceField.EnumeratedStepValue
            this.CoercedType             = SourceField.CoercedType
            this.EnumName                = SourceField.EnumName
            this.GroupStructure          = SourceField.GroupStructure
            this.GroupMemberPrefix       = SourceField.GroupMemberPrefix

            ;;Clone the array dimensions
            this.ArrayDimension = new int[4]
            this.ArrayDimension[1] = SourceField.ArrayDimension[1]
            this.ArrayDimension[2] = SourceField.ArrayDimension[2]
            this.ArrayDimension[3] = SourceField.ArrayDimension[3]
            this.ArrayDimension[4] = SourceField.ArrayDimension[4]

            ;;Clone the AllowList collection
            begin
                data item, @a
                this.AllowList.Clear()
                foreach item in SourceField.AllowList
                    this.AllowList.Add(item)
            end

            ;;Clone the SelectionList collection
            begin
                data item, String
                this.SelectionList.Clear()
                foreach item in SourceField.SelectionList
                    this.SelectionList.Add(item)
            end

            ;;Clone the GroupFields collection
            begin
                data fld, @RpsField
                this.GroupFields.Clear()
                foreach fld in SourceField.GroupFields
                    this.GroupFields.Add(new RpsField(mRepository,fld))
            end

            ;;Clone the CodeGen specific properties
            cloneCodeGenData(SourceField)

        endmethod

        ;;---------------------------------------------------------------------
        ;;Public properties to expose the fields raw DDLIB data

        public property ddlib_f_info, f_info
            method get
            proc
                mreturn mf_info
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;Public properties to expose field attributes
        ;;
        ;;IMPARTANT: If more properties are added, remember to update the cloneField method
        ;;

        ;;; <summary>
        ;;; The name of the structure containing this field.
        ;;; </summary>
        public readwrite property StructureName, String, String.Empty

        ;;; <summary>
        ;;; The name of the field.
        ;;; </summary>
        public readwrite property Name, String, String.Empty

        ;;; <summary>
        ;;; The description of the field.
        ;;; </summary>
        public readwrite property Description, String, String.Empty
        
        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Data type.
        ;;; </summary>
        public property DataType, RpsFieldDataType
            method get
                record
                    retval, RpsFieldDataType
                endrecord
            proc
                using mf_info.fi_type select
                ("A"),
                    using mf_info.fi_class select
                    (C_BINARY),
                        retval = RpsFieldDataType.Binary
                    (C_STRFLD),
                        retval = RpsFieldDataType.StructField
                    (),
                        retval = RpsFieldDataType.Alpha
                    endusing
                ("D"),
                    retval = RpsFieldDataType.Decimal
                ("I"),
                begin
                    using mf_info.fi_class select
                    (C_BOOLEAN),
                        retval = RpsFieldDataType.Boolean
                    (C_ENUM),
                        retval = RpsFieldDataType.Enum
                    (C_AUTOSEQ),
                        retval = RpsFieldDataType.AutoSequence
                    (C_AUTOTIME),
                        retval = RpsFieldDataType.AutoTime
                    (),
                        retval = RpsFieldDataType.Integer
                    endusing
                end
                ("U"),
                    retval = RpsFieldDataType.User
                endusing
                mreturn retval
            endmethod
            method set
            proc
                using value select
                (RpsFieldDataType.Alpha),
                    mf_info.fi_type = "A"
                (RpsFieldDataType.Decimal),
                    mf_info.fi_type = "D"
                (RpsFieldDataType.Integer),
                    mf_info.fi_type = "I"
                (RpsFieldDataType.User),
                    mf_info.fi_type = "U"
                (RpsFieldDataType.Boolean),
                begin
                    mf_info.fi_type = "I"
                    mf_info.fi_class = C_BOOLEAN
                    mf_info.fi_size = 1
                end
                (RpsFieldDataType.Enum),
                begin
                    mf_info.fi_type = "I"
                    mf_info.fi_class = C_ENUM
                    mf_info.fi_size = 4
                end
                (RpsFieldDataType.Binary),
                begin
                    mf_info.fi_type = "A"
                    mf_info.fi_class = C_BINARY
                end
                (RpsFieldDataType.StructField),
                begin
                    mf_info.fi_type = "A"
                    mf_info.fi_class = C_STRFLD
                end
                (RpsFieldDataType.AutoSequence),
                begin
                    mf_info.fi_type = "I"
                    mf_info.fi_class = C_AUTOSEQ
                    mf_info.fi_size = 8
                end
                (RpsFieldDataType.AutoTime),
                begin
                    mf_info.fi_type = "I"
                    mf_info.fi_class = C_AUTOTIME
                    mf_info.fi_size = 8
                end
                endusing
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Data type code ("A", "D", "I" or "U").
        ;;; </summary>
        public property DataTypeCode, string
            method get
            proc
                mreturn mf_info.fi_type
            endmethod
            method set
            proc
                using value select
                ("A","D","I","U"),
                    mf_info.fi_type = value
                endusing
            endmethod
        endproperty

        ;;; <summary>
        ;;; Field size in bytes.
        ;;; </summary>
        public property Size, int
            method get
            proc
                mreturn mf_info.fi_size
            endmethod
            method set
            proc
                mf_info.fi_size = value
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; The precision of an impled decimal field.
        ;;; </summary>
        public property Precision, int
            method get
            proc
                mreturn mf_info.fi_prec
            endmethod
            method set
            proc
                mf_info.fi_prec = value
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; The array dimensions of an array field.
        ;;; </summary>
        public readwrite property ArrayDimension, [#]int

        ;;; <summary>
        ;;; The repository template that this field inherits attributes from.
        ;;; </summary>
        public property Template, String
            method get
            proc
                mreturn %atrim(mf_info.fi_template)
            endmethod
            method set
            proc
                mf_info.fi_template = value
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; The one-based sequence number of this field in the record.
        ;;; </summary>
        public property SequenceNumber, int
            method get
            proc
                mreturn mf_info.fi_seqnm
            endmethod
            method set
            proc
                mf_info.fi_seqnm = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; The one-based starting position of this field within the record.
        ;;; </summary>
        public property StartPosition, int
            method get
            proc
                mreturn mf_info.fi_pos
            endmethod
            method set
            proc
                mf_info.fi_pos = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; The name of the field which this field overlays.
        ;;; </summary>
        public property OverlaysField, String
            method get
            proc
                mreturn %atrim(mf_info.fi_ovrfld)
            endmethod
            method set
            proc
                mf_info.fi_ovrfld = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; The offset from the beginning of the field being overlayed.
        ;;; </summary>
        public property OverlayOffset, int
            method get
            proc
                mreturn mf_info.fi_ovroff
            endmethod
            method set
            proc
                mf_info.fi_ovroff = value
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; The data subclass of the field.
        ;;; </summary>
        public property DataTypeSubclass, RpsFieldSubclass
            method get
                record
                    retval, RpsFieldSubclass
                endrecord
            proc
                retval = RpsFieldSubclass.None
                using mf_info.fi_type select
                (T_ALP),
                    using mf_info.fi_class select
                    (C_BINARY),
                        retval = RpsFieldSubclass.None
                    endusing
                (T_DEC),
                begin
                    using mf_info.fi_class select
                    (C_YYMMDD),
                        retval = RpsFieldSubclass.DateYYMMDD
                    (C_YYYYMMDD),
                        retval = RpsFieldSubclass.DateYYYYMMDD
                    (C_YYJJJ),
                        retval = RpsFieldSubclass.DateYYJJJ
                    (C_YYYYJJJ),
                        retval = RpsFieldSubclass.DateYYYYJJJ
                    (C_YYPP),
                        retval = RpsFieldSubclass.DateYYPP
                    (C_YYYYPP),
                        retval = RpsFieldSubclass.DateYYYYPP
                    (C_HHMMSS),
                        retval = RpsFieldSubclass.TimeHHMMSS
                    (C_HHMM),
                        retval = RpsFieldSubclass.TimeHHMM
                    endusing
                end
                (T_USR),
                begin
                    using mf_info.fi_class select
                    (C_ALPHA),
                        retval = RpsFieldSubclass.UserAlpha
                    (C_NUMERIC),
                        retval = RpsFieldSubclass.UserNumeric
                    (C_DATE),
                        retval = RpsFieldSubclass.UserDate
                    endusing
                end
                endusing
                mreturn retval
            endmethod
            method set
            proc
                using value select
                (RpsFieldSubclass.DateYYMMDD),
                begin
                    mf_info.fi_type = T_DEC
                    mf_info.fi_class = C_YYMMDD
                end
                (RpsFieldSubclass.DateYYYYMMDD),
                begin
                    mf_info.fi_type = T_DEC
                    mf_info.fi_class = C_YYYYMMDD
                end
                (RpsFieldSubclass.DateYYJJJ),
                begin
                    mf_info.fi_type = T_DEC
                    mf_info.fi_class = C_YYJJJ
                end
                (RpsFieldSubclass.DateYYYYJJJ),
                begin
                    mf_info.fi_type = T_DEC
                    mf_info.fi_class = C_YYYYJJJ
                end
                (RpsFieldSubclass.DateYYPP),
                begin
                    mf_info.fi_type = T_DEC
                    mf_info.fi_class = C_YYPP
                end
                (RpsFieldSubclass.DateYYYYPP),
                begin
                    mf_info.fi_type = T_DEC
                    mf_info.fi_class = C_YYYYPP
                end
                (RpsFieldSubclass.TimeHHMMSS),
                begin
                    mf_info.fi_type = T_DEC
                    mf_info.fi_class = C_HHMMSS
                end
                (RpsFieldSubclass.TimeHHMM),
                begin
                    mf_info.fi_type = T_DEC
                    mf_info.fi_class = C_HHMM
                end
                (RpsFieldSubclass.Binary),
                begin
                    mf_info.fi_type = T_ALP
                    mf_info.fi_class = C_BINARY
                end
                (RpsFieldSubclass.UserAlpha),
                begin
                    mf_info.fi_type = T_USR
                    mf_info.fi_class = C_ALPHA
                end
                (RpsFieldSubclass.UserNumeric),
                begin
                    mf_info.fi_type = T_USR
                    mf_info.fi_class = C_NUMERIC
                end
                (RpsFieldSubclass.UserDate),
                begin
                    mf_info.fi_type = T_USR
                    mf_info.fi_class = C_DATE
                end
                endusing
            endmethod
        endproperty

        ;;; <summary>
        ;;; The user defined type of a user defined field.
        ;;; </summary>
        public readwrite property UserFieldType, String, String.Empty

        ;;; <summary>
        ;;; The native size of the field.
        ;;; </summary>
        public property NativeSize, int
            method get
            proc
                mreturn mf_info.fi_ndsize
            endmethod
            method set
            proc
                mf_info.fi_ndsize = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; The name of the repository enumeration referenced by an enum field. 
        ;;; This refers to a Synergy language enumeration, not a UI Toolkit enumeration.
        ;;; </summary>
        public readwrite property EnumName, String, String.Empty
        
        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; The coreced data type of the field.
        ;;; </summary>
        public readwrite property CoercedType, RpsFieldCoercedType, RpsFieldCoercedType.CtNone
        
        ;;; <summary>
        ;;; The name of the structure that defines the type of this struct field.
        ;;; </summary>
        public readwrite property StructFieldStructure, String, String.Empty

        ;;; <summary>
        ;;; Indicates whether or not the field is a group.
        ;;; See the GroupType property to determine the type of group.
        ;;; </summary>
        public property IsGroup, boolean
            method get
            proc
                mreturn (mf_info.fi_group!=0)
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Indicates the type of group referred to by the field (implicit or explicit).
        ;;; </summary>
        public property GroupType, RpsFieldGroup
            method get
            proc
                mreturn (RpsFieldGroup)integer(mf_info.fi_group)
            endmethod
            method set
            proc
                mf_info.fi_group = (int)value
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; The collection of fields within this group field.
        ;;; If this field is not a group this collection will be empty.
        ;;; </summary>
        public readwrite property GroupFields, @RpsFieldCollection, new RpsFieldCollection(mRepository)
        
        ;;; <summary>
        ;;; The structure that defines the fields for an implicit group field.
        ;;; Only used for implicit groups (i.e. groups based on a different repository structure).
        ;;; </summary>
        public readwrite property GroupStructure, string, String.Empty
        
        ;;; <summary>
        ;;; The prefix to be applied to members of the group field.
        ;;; </summary>
        public readwrite property GroupMemberPrefix, String, String.Empty
        
        ;;; <summary>
        ;;; Is the size of the group field equal to the sum of the sizes of all members of the group?
        ;;; </summary>
        public property GroupSizeEqualsMembers, boolean
            method get
            proc
                mreturn mf_info.fi_nosize
            endmethod
            method set
            proc
                mf_info.fi_nosize = value
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Does the compiler use the group member prefix?
        ;;; </summary>
        public property CompilerUsesGroupMemberPrefix, boolean
            method get
            proc
                mreturn mf_info.fi_cmppref
            endmethod
            method set
            proc
                mf_info.fi_cmppref = value
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Is the current field excluded by the compiler?
        ;;; </summary>
        public property ExcludedByLanguage, boolean
            method get
            proc
                mreturn mf_info.fi_dblvw
            endmethod
            method set
            proc
                mf_info.fi_dblvw = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Is the current field invisible to the ReportWriter product?
        ;;; </summary>
        public property ExcludedByReportWriter, boolean
            method get
            proc
                mreturn mf_info.fi_rptvw
            endmethod
            method set
            proc
                mf_info.fi_rptvw = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Is the current field invisible to the UI Toolkit product?
        ;;; </summary>
        public property ExcludedByToolkit, boolean
            method get
            proc
                mreturn mf_info.fi_scrptvw
            endmethod
            method set
            proc
                mf_info.fi_scrptvw = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Is the current field invisible to the Web products?
        ;;; </summary>
        public property ExcludedByWeb, boolean
            method get
            proc
                mreturn mf_info.fi_webvw
            endmethod
            method set
            proc
                mf_info.fi_webvw = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Should the current field be excluded from 'link by name' processing?
        ;;; </summary>
        public property NoNameLink, boolean
            method get
            proc
                mreturn mf_info.fi_nolnk
            endmethod
            method set
            proc
                mf_info.fi_nolnk = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; The repository name of the fields display format, if any.
        ;;; </summary>
        public property FormatName, String
            method get
            proc
                mreturn %atrim(mf_info.fi_fmt)
            endmethod
            method set
            proc
                mf_info.fi_fmt = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; The fields display format string, if any.
        ;;; </summary>
        public readwrite property FormatString, String, String.Empty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Input field justification.
        ;;; </summary>
        public property InputJustification, RpsJustification
            method get
            proc
                mreturn (RpsJustification)integer(mf_info.fi_inpjust)
            endmethod
            method set
            proc
                mf_info.fi_inpjust = (int)value
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Field positioning mode (None, Absolute or Relative).
        ;;; </summary>
        public property FieldPositionMode, RpsPositionMode
            method get
            proc
                mreturn (RpsPositionMode)integer(mf_info.fi_fpostyp)
            endmethod
            method set
            proc
                mf_info.fi_fpostyp = (int)value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Screen row for input.
        ;;; </summary>
        public property FieldRow, int
            method get
            proc
                mreturn mf_info.fi_finprow
            endmethod
            method set
            proc
                mf_info.fi_finprow = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Screen column for input.
        ;;; </summary>
        public property FieldColumn, int
            method get
            proc
                mreturn mf_info.fi_finpcol
            endmethod
            method set
            proc
                mf_info.fi_finpcol = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; For numeric fields, display blank instead of zero.
        ;;; </summary>
        public property BlankIfZero, boolean
            method get
            proc
                mreturn mf_info.fi_bzro
            endmethod
            method set
            proc
                mf_info.fi_bzro = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Is the field a paint field?
        ;;; </summary>
        public property PaintField, boolean
            method get
            proc
                mreturn mf_info.fi_paint
            endmethod
            method set
            proc
                mf_info.fi_paint = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Does the field have a custom paint character specified?
        ;;; See also PaintCharacter.
        ;;; </summary>
        public property PaintCharacterSpecified, boolean
            method get
            proc
                mreturn mf_info.fi_pntchr != " "
            endmethod
        endproperty

        ;;; <summary>
        ;;; The fields custom paint character, if any.
        ;;; See also PaintCharacterSpecified.
        ;;; </summary>
        public property PaintCharacter, string
            method get
            proc
                mreturn mf_info.fi_pntchr ? mf_info.fi_pntchr : "*"
            endmethod
            method set
            proc
                mf_info.fi_pntchr = value
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; How the field should be viewed (Field, RadioButton or Checkbox).
        ;;; </summary>
        public property ViewAs, RpsFieldViewAs
            method get
            proc
                mreturn (RpsFieldViewAs)integer(mf_info.fi_view)
            endmethod
            method set
            proc
                mf_info.fi_view = (int)value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Is the field read-only?
        ;;; </summary>
        public property ReadOnly, boolean
            method get
            proc
                mreturn mf_info.fi_readonly
            endmethod
            method set
            proc
                mf_info.fi_readonly = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Is the field disabled?
        ;;; </summary>
        public property Disabled, boolean
            method get
            proc
                mreturn mf_info.fi_disabled
            endmethod
            method set
            proc
                mf_info.fi_disabled = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; The display length of the field.
        ;;; </summary>
        public property DisplayLength, int
            method get
            proc
                mreturn mf_info.fi_displen
            endmethod
            method set
            proc
                mf_info.fi_displen = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; The view length of the field.
        ;;; </summary>
        public property ViewLength, int
            method get
            proc
                mreturn mf_info.fi_viewlen
            endmethod
            method set
            proc
                mf_info.fi_viewlen = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; The help identifier associated with the field.
        ;;; </summary>
        public readwrite property HelpIdentifier, String, String.Empty
        
        ;;; <summary>
        ;;; Text to be displayed in the information line when the field is being processed.
        ;;; </summary>
        public readwrite property InfoLineText, String, String.Empty
        
        ;;; <summary>
        ;;; The fields "user-defined" text.
        ;;; </summary>
        public readwrite property UserText, String, String.Empty
        
        ;;; <summary>
        ;;; The fields long description.
        ;;; </summary>
        public readwrite property LongDescription, String, String.Empty
        
        ;;; <summary>
        ;;; The alternate name (ODBC name) of the field.
        ;;; </summary>
        public readwrite property AlternateName, String, String.Empty
        
        ;;; <summary>
        ;;; The name of the font palette used to display the field.
        ;;; </summary>
        public readwrite property FieldFont, String, String.Empty
        
        ;;; <summary>
        ;;; The prompt associated with the field.
        ;;; </summary>
        public readwrite property Prompt, String, String.Empty
        
        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; The positioning mode of the prompt (None, Absolute or Relative).
        ;;; </summary>
        public property PromptPositionMode, RpsPositionMode
            method get
            proc
                mreturn (RpsPositionMode)integer(mf_info.fi_postyp)
            endmethod
            method set
            proc
                mf_info.fi_postyp = (int)value
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Screen row where the prompt should be displayed.
        ;;; </summary>
        public property PromptRow, int
            method get
            proc
                mreturn mf_info.fi_inprow
            endmethod
            method set
            proc
                mf_info.fi_inprow = value
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Screen column where the prompt should be displayed.
        ;;; </summary>
        public property PromptColumn, int
            method get
            proc
                mreturn mf_info.fi_inpcol
            endmethod
            method set
            proc
                mf_info.fi_inpcol = value
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; The font palette that should be used to display the prompt.
        ;;; </summary>
        public readwrite property PromptFont, String, String.Empty
        
        ;;; <summary>
        ;;; The heading for the field when displayed in a report.
        ;;; </summary>
        public readwrite property ReportHeading, String, String.Empty
        
        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; The field justification (Left, Right or Center).
        ;;; </summary>
        public property ReportJustification, RpsJustification
            method get
            proc
                mreturn (RpsJustification)integer(mf_info.fi_rptjust)
            endmethod
            method set
            proc
                mf_info.fi_rptjust = (int)value
            endmethod
        endproperty
        
        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; The color palete that should be used to display the field (Palette1 thru Palette16).
        ;;; </summary>
        public property ColorPalette, RpsColorPalette
            method get
            proc
                mreturn (RpsColorPalette)integer(mf_info.fi_color)
            endmethod
            method set
            proc
                mf_info.fi_color = (int)value
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Should the field be highlighted (bolded)?
        ;;; </summary>
        public property RenditionHighlight, boolean
            method get
            proc
                mreturn (mf_info.fi_attrib&&mf_info.fi_highlight)
            endmethod
            method set
            proc
                mf_info.fi_highlight = value
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Should the field be displayed in "reverse video"?
        ;;; </summary>
        public property RenditionReverse, boolean
            method get
            proc
                mreturn (mf_info.fi_attrib&&mf_info.fi_reverse)
            endmethod
            method set
            proc
                mf_info.fi_reverse = value
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Should the field be displayed using a "blinking" font?
        ;;; </summary>
        public property RenditionBlink, boolean
            method get
            proc
                mreturn (mf_info.fi_attrib&&mf_info.fi_blink)
            endmethod
            method set
            proc
                mf_info.fi_blink = value
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Should the field be displayed underlined?
        ;;; </summary>
        public property RenditionUnderline, boolean
            method get
            proc
                mreturn (mf_info.fi_attrib&&mf_info.fi_underline)
            endmethod
            method set
            proc
                mf_info.fi_underline = value
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Should "echo" be s uppressed as the user types (password fields)?
        ;;; See also NoEchoCharacter.
        ;;; </summary>
        public property NoEcho, boolean
            method get
            proc
                mreturn mf_info.fi_noecho
            endmethod
            method set
            proc
                mf_info.fi_noecho = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; If echo is suppressed as the user types, whet character should be displayed instead of the characters typed?
        ;;; See also NoEcho.
        ;;; </summary>
        public property NoEchoCharacter, String
            method get
            proc
                mreturn mf_info.fi_echochr
            endmethod
            method set
            proc
                mf_info.fi_echochr = value
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; The default action assocuated with the field (None, Default, Copy, Increment or Decrement).
        ;;; See also DefaultAuotmatic.
        ;;; </summary>
        public property DefaultAction, RpsFieldDefaultAction
            method get
            proc
                mreturn (RpsFieldDefaultAction)integer(mf_info.fi_defact)
            endmethod
            method set
            proc
                mf_info.fi_defact = (int)value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Should the fields default action be applied automatically?
        ;;; See also DefaultAction.
        ;;; </summary>
        public property DefaultAuotmatic, boolean
            method get
            proc
                mreturn mf_info.fi_auto
            endmethod
            method set
            proc
                mf_info.fi_auto = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Should date fields default to the current day?
        ;;; </summary>
        public property DateDefaultToday, boolean
            method get
            proc
                mreturn mf_info.fi_today
            endmethod
            method set
            proc
                mf_info.fi_today = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Should date fields be displayed in a shortened format?
        ;;; </summary>
        public property AllowShortDate, boolean
            method get
            proc
                mreturn mf_info.fi_short
            endmethod
            method set
            proc
                mf_info.fi_short = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Should time fields default to the current time?
        ;;; </summary>
        public property TimeDefaultNow, boolean
            method get
            proc
                mreturn mf_info.fi_now
            endmethod
            method set
            proc
                mf_info.fi_now = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Should time fields be displayed with an AM/PM indicator?
        ;;; </summary>
        public property TimeAmPm, boolean
            method get
            proc
                mreturn mf_info.fi_ampm
            endmethod
            method set
            proc
                mf_info.fi_ampm = value
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Should a timeout peried be used when processing the field?
        ;;; </summary>
        public property InputTimeoutMode, RpsFieldTimeout
            method get
            proc
                mreturn (RpsFieldTimeout)integer(mf_info.fi_wait)
            endmethod
            method set
            proc
                mf_info.fi_wait = (int)value
            endmethod
        endproperty

        ;;; <summary>
        ;;; What timeout peried should be used when processing the field?
        ;;; </summary>
        public property InputTimeout, int
            method get
            proc
                mreturn mf_info.fi_waittime
            endmethod
            method set
            proc
                mf_info.fi_waittime = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Should input to an alpha field be converted to uppercase?
        ;;; </summary>
        public property Uppercase, boolean
            method get
            proc
                mreturn mf_info.fi_uc
            endmethod
            method set
            proc
                mf_info.fi_uc = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Should entry to implied decimal fields not require the entry of a decimal point?
        ;;; </summary>
        public property NoDecimalRequired, boolean
            method get
            proc
                mreturn mf_info.fi_nodec
            endmethod
            method set
            proc
                mf_info.fi_nodec = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Should the field terminate automatically when full?
        ;;; </summary>
        public property NoTerminatorRequired, boolean
            method get
            proc
                mreturn mf_info.fi_noterm
            endmethod
            method set
            proc
                mf_info.fi_noterm = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Should the position of the cursor within the field be retained between
        ;;; different times when the field is being processed?
        ;;; </summary>
        public property RetainPosition, boolean
            method get
            proc
                mreturn mf_info.fi_retpos
            endmethod
            method set
            proc
                mf_info.fi_retpos = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; The input length of the field.
        ;;; </summary>
        public property InputLength, int
            method get
            proc
                mreturn mf_info.fi_inplen
            endmethod
            method set
            proc
                mf_info.fi_inplen = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Does the field require a value in order to be valid?
        ;;; </summary>
        public property Required, boolean
            method get
            proc
                mreturn mf_info.fi_req
            endmethod
            method set
            proc
                mf_info.fi_req = value
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Is the field a "break" field (None, Change, Always or OnReturn)?
        ;;; </summary>
        public property BreakMode, RpsFieldBreak
            method get
            proc
                mreturn (RpsFieldBreak)integer(mf_info.fi_break)
            endmethod
            method set
            proc
                mf_info.fi_break = (int)value
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Are negative values allowed in numeric fields (None, Allowed, Only or OrZero)?
        ;;; </summary>
        public property NegativeAllowed, RpsFieldNegatives
            method get
            proc
                mreturn (RpsFieldNegatives)integer(mf_info.fi_negalw)
            endmethod
            method set
            proc
                mf_info.fi_negalw = (int)value
            endmethod
        endproperty

        ;;; <summary>
        ;;; A list of values that are allowed in the field.
        ;;; An empty collection if all values are allowed.
        ;;; See also AllowListMatchCase, AllowListMatchExact and AllowListMaxLength.
        ;;; </summary>
        public readwrite property AllowList, @ArrayList, new ArrayList()

        ;;; <summary>
        ;;; If the content of the field is restricted to certain values,
        ;;; what is the maximum length of those allowed values.
        ;;; See also AllowList.
        ;;; </summary>
        public property AllowListMaxLength, int
            method get
            proc
                mreturn mf_info.fi_alwlen
            endmethod
            method set
            proc
                mf_info.fi_alwlen = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; If the content of the field is restricted to specific allowed values,
        ;;; should the comparison to that list be case sensitive?
        ;;; See also AllowList.
        ;;; </summary>
        public property AllowListMatchCase, boolean
            method get
            proc
                mreturn mf_info.fi_matchcs
            endmethod
            method set
            proc
                mf_info.fi_matchcs = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; If the content of the field is restricted to specific allowed values,
        ;;; should the comparison to that list be for an exact match?
        ;;; See also AllowList.
        ;;; </summary>
        public property AllowListMatchExact, boolean
            method get
            proc
                mreturn mf_info.fi_matchex
            endmethod
            method set
            proc
                mf_info.fi_matchex = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; A collection of valid selections to be displayed as a drop-doen list or
        ;;; collection of radio buttons.
        ;;; </summary>
        public readwrite property SelectionList, @List<String>, new List<String>()

        ;;; <summary>
        ;;; If a collection of valid selections is provided, what is the maximum length
        ;;; of those selections?
        ;;; </summary>
        public property SelectionListMaxLength, int
            method get
            proc
                mreturn mf_info.fi_sellen
            endmethod
            method set
            proc
                mf_info.fi_sellen = value
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Type of selection list (Window or List).
        ;;; </summary>
        public property SelectionListType, RpsFieldSelectionType
            method get
            proc
                mreturn (RpsFieldSelectionType)integer(mf_info.fi_seltyp)
            endmethod
            method set
            proc
                mf_info.fi_seltyp = (int)value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Screen row for the display of a selection window.
        ;;; </summary>
        public property SelectionWindowRow, int
            method get
            proc
                mreturn mf_info.fi_selrow
            endmethod
            method set
            proc
                mf_info.fi_selrow = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Screen column for the display of a selection window.
        ;;; </summary>
        public property SelectionWindowColumn, int
            method get
            proc
                mreturn mf_info.fi_selcol
            endmethod
            method set
            proc
                mf_info.fi_selcol = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; The name of the selection window associated with the field.
        ;;; Only used if SelectionListType is RpsFieldSelectionType.Window
        ;;; </summary>
        public property SelectionWindowName, String
            method get
            proc
                mreturn %atrim(mf_info.fi_selwin)
            endmethod
            method set
            proc
                mf_info.fi_selwin = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; The height of the selection window associated with the field.
        ;;; Only used if SelectionListType is RpsFieldSelectionType.List
        ;;; </summary>
        public property SelectionWindowHeight, int
            method get
            proc
                mreturn mf_info.fi_selht
            endmethod
            method set
            proc
                mf_info.fi_selht = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; The default value for the field.
        ;;; </summary>
        public readwrite property DefaultValue, String, String.Empty

        ;;; <summary>
        ;;; The name of the arrive method associated with the field.
        ;;; </summary>
        public readwrite property ArriveMethod, String, String.Empty

        ;;; <summary>
        ;;; The name of the leave method associated with the field.
        ;;; </summary>
        public readwrite property LeaveMethod, String, String.Empty

        ;;; <summary>
        ;;; The name of the drill method associated with the field.
        ;;; </summary>
        public readwrite property DrillMethod, String, String.Empty

        ;;; <summary>
        ;;; The name of the hyperlink method associated with the field.
        ;;; </summary>
        public readwrite property HyperlinkMethod, String, String.Empty

        ;;; <summary>
        ;;; The name of the change method associated with the field.
        ;;; </summary>
        public readwrite property ChangeMethod, String, String.Empty

        ;;; <summary>
        ;;; The name of the display method associated with the field.
        ;;; </summary>
        public readwrite property DisplayMethod, String, String.Empty

        ;;; <summary>
        ;;; The name of the edit format method associated with the field.
        ;;; </summary>
        public readwrite property EditFormatMethod, String, String.Empty

        ;;; <summary>
        ;;; Does a range of allowed values exist for a numeric field.
        ;;; See also NumericRangeMinimum and NumericRangeMaximum.
        ;;; </summary>
        public property NumericRangeExists, boolean
            method get
            proc
                mreturn mf_info.fi_range
            endmethod
            method set
            proc
                mf_info.fi_range = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; The minimum value allowed in a numeric field.
        ;;; See also NumericRangeExists.
        ;;; </summary>
        public readwrite property NumericRangeMinimum, decimal, 0.0

        ;;; <summary>
        ;;; The maximum value allowed in a numeric field.
        ;;; See also NumericRangeExists.
        ;;; </summary>
        public readwrite property NumericRangeMaximum, decimal, 0.0

        ;;; <summary>
        ;;; The the field "enumerated"? i.e. are selections translated into numeric values?
        ;;; See also EnumeratedDisplayLength, EnumeratedBaseValue and EnumeratedStepValue
        ;;; </summary>
        public property Enumerated, boolean
            method get
            proc
                mreturn (mf_info.fi_enum!=0)
            endmethod
            method set
            proc
                mf_info.fi_enum = (value>0)
            endmethod
        endproperty

        ;;; <summary>
        ;;; The maximum length of an emumerated fields selections.
        ;;; See also Enumerated.
        ;;; </summary>
        public readwrite property EnumeratedDisplayLength, int, 0

        ;;; <summary>
        ;;; The value of an enumerated fields first selection.
        ;;; See also Enumerated.
        ;;; </summary>
        public readwrite property EnumeratedBaseValue, int, 0

        ;;; <summary>
        ;;; An enumerated fields step value.
        ;;; the base value is incremented by this value for each selection.
        ;;; See also Enumerated.
        ;;; </summary>
        public readwrite property EnumeratedStepValue, int, 0

    endclass
    
    public enum MappedType
        CSharp
        VB
        SQL
        ObjectiveC
        TypeScript
        SynergyDotNet
    endenum

    public partial class RpsField

        ;;CodeGen uses the following "name" properties
        ;;
        ;;Name          Starts off as the actual name of the field per repository
        ;;              Could change to include paths and array dimensions after CheckStructure
        ;;
        ;;AlternateName Starts off as the alternate name of the field per repository
        ;;              Set to the same as Name if no alternate name is defined
        ;;              Could change to include paths and array dimensions after CheckStructure
        ;;
        ;;BaseName      Starts off as the base name of the field per repository
        ;;              Could change to include paths and array dimensions after CheckStructure
        ;;              For arrays, BaseName does NOT include any final array element number
        ;;
        ;;OriginalName  The original name of the field (per repository definition)
        ;;
        ;;SqlName       The SQL name has array element brackets and path periods removed.
        ;;
        ;;OdbcName      The ODBC name is like the SQL name, but has an _ before array element numbers.
        ;;


        ;;CodeGen specific Field attribute data
        ;;
        ;;IMPARTANT: If more properties are added, remember to update the cloneField method
        ;;
;protected mCsType               ,String     ;C# data type
;protected mCsDefault            ,String     ;C# default value
;protected mCsNumericConvert     ,String     ;C# numeric conversion function (e.g. int.TryParse)
;protected mDblNetConverterer    ,String     ;Synergy to C# converter method (e.g. DblNetConverter.ToInt32)
;protected mOcType               ,String     ;Objective-C data type
;protected mOcDefault            ,String     ;Objective-C default value
;protected mOcObject             ,boolean    ;Objective-C data type is an object
;protected mVbType               ,String     ;VB.NET data type
;protected mVbDefault            ,String     ;VB default value
;protected mSqlType              ,String     ;SQL data type
;protected mSnType               ,String     ;Synergy .NET type
;protected mSnDefault            ,String     ;Synergy .NET default value
;protected mMappedField          ,String     ;Mapped field name
;protected mMappingFunction      ,String     ;Mapping conversion function
;protected mUnmappingFunction    ,String     ;Mapping unconversion function
;protected mAutoIncrement        ,boolean    ;Auto incrementing numeric field
;protected mWasArrayElement      ,boolean    ;Field was from an expanded array
;protected mOriginalElement      ,[#]int     ;Original element #'s for expanded array fields
;protected mSqlName              ,String     ;SQL compatible name
;protected mOdbcName             ,String     ;ODBC compatible name
;protected mFieldNumber          ,int        ;Field number (for <FIELD#>)
;protected mLogicalFieldNumber   ,int        ;Field number (for <FIELD#LOGICAL>)

        protected static mMappings, @DataMappings

        private method loadCodeGenData, void
            endparams
        proc

            ;;First time in, create a mappings object
            if (mMappings==^null)
                mMappings = new DataMappings()

            ;;Describe the current field to the DataMapping objects
            mMappings.SetFieldAttributes(this.Size,this.Precision)

            ;;Load the CodeGen specific attributes

            this.CsType  = getDataType(MappedType.CSharp)
            this.VbType  = getDataType(MappedType.VB)
            this.SqlType = getDataType(MappedType.SQL)
            this.OcType  = getDataType(MappedType.ObjectiveC)
            this.SnType  = getDataType(MappedType.SynergyDotNet)
            this.TsType  = getDataType(MappedType.TypeScript)

            using DataType select
            (RpsFieldDataType.Alpha),
            begin
                this.TypeCode = "A"
                using DataTypeSubclass select
                (RpsFieldSubclass.Binary),
                begin
                    this.TypeName = "BINARY"
                    this.CsNumericConvert = ""
                    this.DblNetConverterer = "DblNetConverter.NotImplemented"
                    this.CsDefault = '""'
                    this.VbDefault = '""'
                    this.OcDefault = '@""'
                    this.OcObject = true
                    this.SnDefault = '""'
                    this.TsDefault = '""'
                end
                (),
                begin
                    this.TypeName = "ALPHA"
                    this.CsNumericConvert = ""
                    this.DblNetConverterer = "DblNetConverter.AlphaToString"
                    this.CsDefault = '""'
                    this.VbDefault = '""'
                    this.OcDefault = '@""'
                    this.OcObject = true
                    this.SnDefault = '""'
                    this.TsDefault = '""'
                end
                endusing
            end
            (RpsFieldDataType.User),
            begin
                this.TypeCode = "A"
                using DataTypeSubclass select
                (RpsFieldSubclass.UserAlpha),
                begin
                    this.TypeName = "USER ALPHA"
                    this.CsNumericConvert = ""
                    this.DblNetConverterer = "DblNetConverter.AlphaToString"
                    this.CsDefault = '""'
                    this.VbDefault = '""'
                    this.OcDefault = '@""'
                    this.OcObject = true
                    this.SnDefault = '""'
                    this.TsDefault = '""'
                end
                (RpsFieldSubclass.UserNumeric),
                begin
                    this.TypeName = "USER NUMERIC"
                    this.CsNumericConvert = ""
                    this.DblNetConverterer = "DblNetConverter.NotImplemented"
                    this.CsDefault = '""'
                    this.VbDefault = '""'
                    this.OcDefault = '@""'
                    this.OcObject = true
                    this.SnDefault = '""'
                    this.TsDefault = '""'
                end
                (RpsFieldSubclass.UserDate),
                begin
                    this.TypeName = "USER DATE"
                    this.CsNumericConvert = ""
                    this.DblNetConverterer = "DblNetConverter.NotImplemented"
                    this.CsDefault = '""'
                    this.VbDefault = '""'
                    this.OcDefault = '@""'
                    this.OcObject = true
                    this.SnDefault = '""'
                    this.TsDefault = '""'
                end
                endusing
            end
            (RpsFieldDataType.Decimal),
            begin
                this.TypeCode = "D"
                using DataTypeSubclass select
                (RpsFieldSubclass.DateYYYYMMDD),
                begin
                    this.TypeName = "DATE"
                    this.CsNumericConvert = ""
                    this.DblNetConverterer = "DblNetConverter.YYYYMMDDToDateTime"
                    this.CsDefault = "new DateTime()"
                    this.VbDefault = "New DateTime()"
                    this.OcDefault = "[NSDate new]"
                    this.OcObject = true
                    this.SnDefault = "new DateTime()"
                    this.TsDefault = 'new Date()'
                end
                (RpsFieldSubclass.DateYYMMDD),
                begin
                    this.TypeName = "DATE"
                    this.CsNumericConvert = ""
                    this.DblNetConverterer = "DblNetConverter.YYMMDDToDateTime"
                    this.CsDefault = "new DateTime()"
                    this.VbDefault = "New DateTime()"
                    this.OcDefault = "[NSDate new]"
                    this.OcObject = true
                    this.SnDefault = "new DateTime()"
                    this.TsDefault = 'new Date()'
                end
                (RpsFieldSubclass.DateYYYYJJJ),
                begin
                    this.TypeName = "DATE"
                    this.CsNumericConvert = ""
                    this.DblNetConverterer = "DblNetConverter.YYYYJJJToDateTime"
                    this.CsDefault = "new DateTime()"
                    this.VbDefault = "New DateTime()"
                    this.OcDefault = "[NSDate new]"
                    this.OcObject = true
                    this.SnDefault = "new DateTime()"
                    this.TsDefault = 'new Date()'
                end
                (RpsFieldSubclass.DateYYJJJ),
                begin
                    this.TypeName = "DATE"
                    this.CsNumericConvert = ""
                    this.DblNetConverterer = "DblNetConverter.YYJJJToDateTime"
                    this.CsDefault = "new DateTime()"
                    this.VbDefault = "New DateTime()"
                    this.OcDefault = "[NSDate new]"
                    this.OcObject = true
                    this.SnDefault = "new DateTime()"
                    this.TsDefault = 'new Date()'
                end
                (RpsFieldSubclass.DateYYYYPP),
                begin
                    this.TypeName = "DATE"
                    this.CsNumericConvert = ""
                    this.DblNetConverterer = "DblNetConverter.NotImplemented"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = 'new Date()'
                end
                (RpsFieldSubclass.DateYYPP),
                begin
                    this.TypeName = "DATE"
                    this.CsNumericConvert = ""
                    this.DblNetConverterer = "DblNetConverter.NotImplemented"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = 'new Date()'
                end
                (RpsFieldSubclass.TimeHHMMSS),
                begin
                    this.TypeName = "TIME"
                    this.CsNumericConvert = ""
                    this.DblNetConverterer = "DblNetConverter.HHMMSSToTimeSpan"
                    this.CsDefault = "new DateTime()"
                    this.VbDefault = "New DateTime()"
                    this.OcDefault = "[NSDate new]"
                    this.OcObject = true
                    this.SnDefault = "new DateTime()"
                    this.TsDefault = 'new Date()'
                end
                (RpsFieldSubclass.TimeHHMM),
                begin
                    this.TypeName = "TIME"
                    this.CsNumericConvert = ""
                    this.DblNetConverterer = "DblNetConverter.HHMMToTimeSpan"
                    this.CsDefault = "new DateTime()"
                    this.VbDefault = "New DateTime()"
                    this.OcDefault = "[NSDate new]"
                    this.OcObject = true
                    this.SnDefault = "new DateTime()"
                    this.TsDefault = 'new Date()'
                end
                (),
                begin
                    if (Precision) then
                    begin
                        this.TypeName = "IMPLIED"
                        this.CsNumericConvert = "decimal.TryParse"
                        this.DblNetConverterer = "DblNetConverter.ImpliedToDecimal"
                        this.CsDefault = "0"
                        this.VbDefault = "0"
                        this.OcDefault = "0.0"
                        this.OcObject = false
                        this.SnDefault = "0.0"
                        this.TsDefault = "0.0"
                    end
                    else
                    begin
                        if (Size<=9) then
                        begin
                            this.TypeName = "DECIMAL"
                            this.CsNumericConvert = "int.TryParse"
                            this.DblNetConverterer = "DblNetConverter.SmallDecimalToInt"
                            this.CsDefault = "0"
                            this.VbDefault = "0"
                            this.OcDefault = "0"
                            this.OcObject = false
                            this.SnDefault = "0"
                            this.TsDefault = "0"
                        end
                        else
                        begin
                            this.TypeName = "DECIMAL"
                            this.CsNumericConvert = "long.TryParse"
                            this.DblNetConverterer = "DblNetConverter.LargeDecimalToLong"
                            this.CsDefault = "0"
                            this.VbDefault = "0"
                            this.OcDefault = "0"
                            this.OcObject = false
                            this.SnDefault = "0"
                            this.TsDefault = "0"
                        end
                    end
                end
                endusing
            end
            (RpsFieldDataType.Integer),
            begin
                this.TypeCode = "I"
                using Size select
                (1),
                begin
                    this.TypeName = "INTEGER"
                    this.CsNumericConvert = "int.TryParse"
                    this.DblNetConverterer = "DblNetConverter.I1ToSByte"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (2),
                begin
                    this.TypeName = "INTEGER"
                    this.CsNumericConvert = "int.TryParse"
                    this.DblNetConverterer = "DblNetConverter.I2ToShort"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (4),
                begin
                    this.TypeName = "INTEGER"
                    this.CsNumericConvert = "int.TryParse"
                    this.DblNetConverterer = "DblNetConverter.I4ToInt"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (8),
                begin
                    this.TypeName = "INTEGER"
                    this.CsNumericConvert = "long.TryParse"
                    this.DblNetConverterer = "DblNetConverter.I8ToLong"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                endusing
            end
            (RpsFieldDatatype.Boolean),
            begin
                this.TypeCode = "BOOLEAN"
                this.TypeName = "BOOLEAN"
                this.CsNumericConvert = "bool.TryParse"
                this.DblNetConverterer = "DblNetConverter.BooleanToBoolean"
                this.CsDefault = "false"
                this.VbDefault = "False"
                this.OcDefault = "NO"
                this.OcObject = false
                this.SnDefault = "false"
                this.TsDefault = "false"
            end
            (RpsFieldDataType.Enum),    ;;Previously could not happen because of RepositoryTools.CheckStructure
            begin
                this.TypeCode = this.EnumName
                this.TypeName = "ENUM"
                this.CsNumericConvert = ""
                this.DblNetConverterer = "DblNetConverter.NotImplemented"
                this.CsDefault = ""
                this.VbDefault = ""
                this.OcDefault = ""
                this.OcObject = false
                this.SnDefault = ""
                this.TsDefault = ""
            end
            (RpsFieldDataType.Binary),  ;;Previously could not happen because of RepositoryTools.CheckStructure
            begin
                this.TypeCode = "A"
                this.TypeName = "BINARY"
                this.CsNumericConvert = ""
                this.DblNetConverterer = "DblNetConverter.NotImplemented"
                this.CsDefault = ""
                this.VbDefault = ""
                this.OcDefault = ""
                this.OcObject = false
                this.SnDefault = ""
                this.TsDefault = ""
            end
            (RpsFieldDataType.Structfield), ;;Previously could not happen because of RepositoryTools.CheckStructure
            begin
                this.TypeCode = this.StructFieldStructure
                this.TypeName = "STRUCT FIELD"
                this.CsNumericConvert = ""
                this.DblNetConverterer = "DblNetConverter.NotImplemented"
                this.CsDefault = ""
                this.VbDefault = ""
                this.OcDefault = ""
                this.OcObject = false
                this.SnDefault = ""
                this.TsDefault = ""
            end
            (RpsFieldDataType.AutoSequence),
            begin
                this.TypeCode = "I"
                this.TypeName = "AUTO SEQUENCE"
                this.CsNumericConvert = "long.TryParse"
                this.DblNetConverterer = "DblNetConverter.I8ToLong"
                this.CsDefault = "0"
                this.VbDefault = "0"
                this.OcDefault = "0"
                this.OcObject = false
                this.SnDefault = "0"
                this.TsDefault = "0"
            end
            (RpsFieldDataType.AutoTime),
            begin
                this.TypeCode = "I"
                this.TypeName = "AUTO TIMESTAMP"
                this.CsNumericConvert = "long.TryParse"
                this.DblNetConverterer = "DblNetConverter.I8ToLong"
                this.CsDefault = "0"
                this.VbDefault = "0"
                this.OcDefault = "0"
                this.OcObject = false
                this.SnDefault = "0"
                this.TsDefault = "0"
            end
            endusing

            ;;If the field has an explicit coercion then use it
            if (CoercedType!=RpsFieldCoercedType.CtNone)
            begin
                using CoercedType select
                (RpsFieldCoercedType.CtByte),
                begin
                    this.TypeName = "BYTE"
                    this.CsNumericConvert = "byte.TryParse"
                    this.DblNetConverterer = "DblNetConverter.NumberToByte"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (RpsFieldCoercedType.CtShort),
                begin
                    this.TypeName = "SHORT"
                    this.CsNumericConvert = "short.TryParse"
                    this.DblNetConverterer = "DblNetConverter.NumberToShort"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (RpsFieldCoercedType.CtInt),
                begin
                    this.TypeName = "INTEGER"
                    this.CsNumericConvert = "int.TryParse"
                    this.DblNetConverterer = "DblNetConverter.NumberToInt"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (RpsFieldCoercedType.CtLong),
                begin
                    this.TypeName = "LONG"
                    this.CsNumericConvert = "long.TryParse"
                    this.DblNetConverterer = "DblNetConverter.NumberToLong"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (RpsFieldCoercedType.CtSbyte),
                begin
                    this.TypeName = "SBYTE"
                    this.CsNumericConvert = "sbyte.TryParse"
                    this.DblNetConverterer = "DblNetConverter.NumberToSByte"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (RpsFieldCoercedType.CtUshort),
                begin
                    this.TypeName = "USHORT"
                    this.CsNumericConvert = "ushort.TryParse"
                    this.DblNetConverterer = "DblNetConverter.NumberToUShort"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (RpsFieldCoercedType.CtUint),
                begin
                    this.TypeName = "UINTEGER"
                    this.CsNumericConvert = "uint.TryParse"
                    this.DblNetConverterer = "DblNetConverter.NumberToUInt"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (RpsFieldCoercedType.CtUlong),
                begin
                    this.TypeName = "ULONG"
                    this.CsNumericConvert = "ulong.TryParse"
                    this.DblNetConverterer = "DblNetConverter.NumberToULong"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0"
                    this.OcObject = false
                    this.SnDefault = "0"
                    this.TsDefault = "0"
                end
                (RpsFieldCoercedType.CtBoolean),
                begin
                    this.TypeName = "BOOLEAN"
                    this.CsNumericConvert = "bool.TryParse"
                    this.DblNetConverterer = "DblNetConverter.NumberToBoolean"
                    this.CsDefault = "false"
                    this.VbDefault = "False"
                    this.OcDefault = "NO"
                    this.OcObject = false
                    this.SnDefault = "false"
                    this.TsDefault = "false"
                end
                (RpsFieldCoercedType.CtDouble),
                begin
                    this.TypeName = "DOUBLE"
                    this.CsNumericConvert = "double.TryParse"
                    this.DblNetConverterer = "DblNetConverter.NumberToDouble"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0.0"
                    this.OcObject = false
                    this.SnDefault = "0.0"
                    this.TsDefault = "0.0"
                end
                (RpsFieldCoercedType.CtFloat),
                begin
                    this.TypeName = "FLOAT"
                    this.CsNumericConvert = "float.TryParse"
                    this.DblNetConverterer = "DblNetConverter.NumberToSingle"
                    this.CsDefault = "0"
                    this.VbDefault = "0"
                    this.OcDefault = "0.0"
                    this.OcObject = false
                    this.SnDefault = "0.0"
                    this.TsDefault = "0.0"
                end
                (RpsFieldCoercedType.CtNullDateTime),
                begin
                    this.TypeName = "NULLABLEDATETIME"
                    this.CsNumericConvert = ""
                    this.DblNetConverterer = "DblNetConverter.DateToNullableDateTime"
                    this.CsDefault = "null"
                    this.VbDefault = "Nothing"
                    this.OcDefault = "[NSDate new]"
                    this.OcObject = true
                    this.SnDefault = "^null"
                    this.TsDefault = "null"
                end
                endusing
            end

            ;;Mapped field
            this.MappedField = RpsUtils.GetMappedField(this.StructureName,this.Name,this.UserText,this.LongDescription)

            ;;Mapping conversion function
            this.MappingFunction = RpsUtils.GetMappingFunction(this.StructureName,this.Name,this.UserText,this.LongDescription)

            ;;Mapping unconversion function
            this.UnmappingFunction = RpsUtils.GetUnMappingFunction(this.StructureName,this.Name,this.UserText,this.LongDescription)

            ;;Auto incrmenting field
            this.AutoIncrement = false
            begin
                data pos1, int
                if (pos1=instr(1,this.UserText.ToUpper(),"@AUTOINCREMENT;")) then
                    this.AutoIncrement = true
                else if (pos1=instr(1,this.LongDescription.ToUpper(),"@AUTOINCREMENT;"))
                    this.AutoIncrement = true
            end

            this.WasArrayElement = false
            this.OriginalElement[1] = this.ArrayDimension[1]
            this.OriginalElement[2] = this.ArrayDimension[2]
            this.OriginalElement[3] = this.ArrayDimension[3]
            this.OriginalElement[4] = this.ArrayDimension[4]

            this.SqlName = this.Name
            this.OdbcName = this.Name

            ;;These two are ONLY used WITHIN CodeGen. The values are populated
            ;;by CodeGenEngine.CheckStructure()
            this.FieldNumber = 0
            this.LogicalFieldNumber = 0

        endmethod

        private method cloneCodeGenData, void
            required in SourceField, @RpsField
            endparams
        proc
            ;;Clone the CodeGen specific properties
            this.TypeCode               = SourceField.TypeCode
            this.TypeName               = SourceField.TypeName
            this.CsType                 = SourceField.CsType
            this.CsDefault              = SourceField.CsDefault
            this.CsNumericConvert       = SourceField.CsNumericConvert
            this.OcType                 = SourceField.OcType
            this.OcDefault              = SourceField.OcDefault
            this.OcObject               = SourceField.OcObject
            this.TsType                 = SourceField.TsType
            this.TsDefault              = SourceField.TsDefault
            this.VbType                 = SourceField.VbType
            this.VbDefault              = SourceField.VbDefault
            this.SqlType                = SourceField.SqlType
            this.SnType                 = SourceField.SnType
            this.SnDefault              = SourceField.SnDefault
            this.MappedField            = SourceField.MappedField
            this.MappingFunction        = SourceField.MappingFunction
            this.UnmappingFunction      = SourceField.UnmappingFunction
            this.AutoIncrement          = SourceField.AutoIncrement
            this.WasArrayElement        = SourceField.WasArrayElement
            this.SqlName                = SourceField.SqlName
            this.OdbcName               = SourceField.OdbcName
            this.OriginalName           = SourceField.OriginalName
            this.OriginalNameModified   = SourceField.OriginalNameModified
            this.BaseName               = SourceField.BaseName

            this.OriginalElement        = new int[4]
            this.OriginalElement[1]     = SourceField.OriginalElement[1]
            this.OriginalElement[2]     = SourceField.OriginalElement[2]
            this.OriginalElement[3]     = SourceField.OriginalElement[3]
            this.OriginalElement[4]     = SourceField.OriginalElement[4]

            this.FieldNumber= SourceField.FieldNumber
            this.LogicalFieldNumber= SourceField.LogicalFieldNumber

        endmethod

        private method getDataType, string
            required in ToType  ,MappedType
            endparams
        proc

            using DataType select
            (RpsFieldDataType.Alpha),
            begin
                using DataTypeSubclass select
                (RpsFieldSubclass.Binary),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetBinaryAlphaType()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetBinaryAlphaType()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetBinaryAlphaType()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetBinaryAlphaType()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetBinaryAlphaType()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetBinaryAlphaType()
                    endusing
                end
                (),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetAlphaType()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetAlphaType()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetAlphaType()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetAlphaType()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetAlphaType()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetAlphaType()
                    endusing
                end
                endusing
            end
            (RpsFieldDataType.User),
            begin
                using DataTypeSubclass select
                (RpsFieldSubclass.UserAlpha),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetUserAlphaType()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetUserAlphaType()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetUserAlphaType()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetUserAlphaType()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetUserAlphaType()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetUserAlphaType()
                    endusing
                end
                (RpsFieldSubclass.UserNumeric),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetUserNumericType()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetUserNumericType()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetUserNumericType()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetUserNumericType()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetUserNumericType()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetUserNumericType()
                    endusing
                end
                (RpsFieldSubclass.UserDate),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetUserDateType()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetUserDateType()
                    (MappedType.SQL),
                    begin
                        using UserFieldType select
                        ("^CLASS^=YYYYMMDDHHMISSUUUUUU"),
                            mreturn mMappings.CsMappings.GetUserTimeStampType()
                        (),
                            mreturn mMappings.SqlMappings.GetUserDateType()
                        endusing
                    end
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetUserDateType()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetUserDateType()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetUserDateType()
                    endusing
                end
                endusing
            end
            (RpsFieldDataType.Decimal),
            begin
                using DataTypeSubclass select
                (RpsFieldSubclass.DateYYYYMMDD),
                begin
                    if (CoercedType == RpsFieldCoercedType.CtNullDateTime) then
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetNullableDateYYYYMMDDType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetNullableDateYYYYMMDDType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetNullableDateYYYYMMDDType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetNullableDateYYYYMMDDType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetNullableDateYYYYMMDDType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetNullableDateYYYYMMDDType()
                        endusing
                    end
                    else
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetDateYYYYMMDDType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetDateYYYYMMDDType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetDateYYYYMMDDType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetDateYYYYMMDDType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetDateYYYYMMDDType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetDateYYYYMMDDType()
                        endusing
                    end
                end
                (RpsFieldSubclass.DateYYMMDD),
                begin
                    if (CoercedType == RpsFieldCoercedType.CtNullDateTime) then
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetNullableDateYYMMDDType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetNullableDateYYMMDDType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetNullableDateYYMMDDType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetNullableDateYYMMDDType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetNullableDateYYMMDDType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetNullableDateYYMMDDType()
                        endusing
                    end
                    else
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetDateYYMMDDType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetDateYYMMDDType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetDateYYMMDDType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetDateYYMMDDType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetDateYYMMDDType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetDateYYMMDDType()
                        endusing
                    end
                end
                (RpsFieldSubclass.DateYYYYJJJ),
                begin
                    if (CoercedType == RpsFieldCoercedType.CtNullDateTime) then
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetNullableDateYYYYJJJType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetNullableDateYYYYJJJType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetNullableDateYYYYJJJType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetNullableDateYYYYJJJType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetNullableDateYYYYJJJType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetNullableDateYYYYJJJType()
                        endusing
                    end
                    else
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetDateYYYYJJJType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetDateYYYYJJJType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetDateYYYYJJJType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetDateYYYYJJJType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetDateYYYYJJJType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetDateYYYYJJJType()
                        endusing
                    end
                end
                (RpsFieldSubclass.DateYYJJJ),
                begin
                    if (CoercedType == RpsFieldCoercedType.CtNullDateTime) then
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetNullableDateYYJJJType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetNullableDateYYJJJType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetNullableDateYYJJJType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetNullableDateYYJJJType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetNullableDateYYJJJType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetNullableDateYYJJJType()
                        endusing
                    end
                    else
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetDateYYJJJType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetDateYYJJJType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetDateYYJJJType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetDateYYJJJType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetDateYYJJJType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetDateYYJJJType()
                        endusing
                    end
                end
                (RpsFieldSubclass.DateYYYYPP),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetDateYYYYPPType()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetDateYYYYPPType()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetDateYYYYPPType()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetDateYYYYPPType()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetDateYYYYPPType()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetDateYYYYPPType()
                    endusing
                end
                (RpsFieldSubclass.DateYYPP),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetDateYYPPType()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetDateYYPPType()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetDateYYPPType()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetDateYYPPType()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetDateYYPPType()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetDateYYPPType()
                    endusing
                end
                (RpsFieldSubclass.TimeHHMMSS),
                begin
                    if (CoercedType == RpsFieldCoercedType.CtNullDateTime) then
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetNullableTimeHHMMSSType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetNullableTimeHHMMSSType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetNullableTimeHHMMSSType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetNullableTimeHHMMSSType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetNullableTimeHHMMSSType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetNullableTimeHHMMSSType()
                        endusing
                    end
                    else
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetTimeHHMMSSType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetTimeHHMMSSType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetTimeHHMMSSType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetTimeHHMMSSType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetTimeHHMMSSType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetTimeHHMMSSType()
                        endusing
                    end
                end
                (RpsFieldSubclass.TimeHHMM),
                begin
                    if (CoercedType == RpsFieldCoercedType.CtNullDateTime) then
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetNullableTimeHHMMType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetNullableTimeHHMMType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetNullableTimeHHMMType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetNullableTimeHHMMType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetNullableTimeHHMMType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetNullableTimeHHMMType()
                        endusing
                    end
                    else
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetTimeHHMMType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetTimeHHMMType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetTimeHHMMType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetTimeHHMMType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetTimeHHMMType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetTimeHHMMType()
                        endusing
                    end
                end
                (),
                begin
                    if (Precision) then
                    begin
                        using ToType select
                        (MappedType.CSharp),
                            mreturn mMappings.CsMappings.GetImpliedDecimalType()
                        (MappedType.VB),
                            mreturn mMappings.VbMappings.GetImpliedDecimalType()
                        (MappedType.SQL),
                            mreturn mMappings.SqlMappings.GetImpliedDecimalType()
                        (MappedType.ObjectiveC),
                            mreturn mMappings.OcMappings.GetImpliedDecimalType()
                        (MappedType.TypeScript),
                            mreturn mMappings.TsMappings.GetImpliedDecimalType()
                        (MappedType.SynergyDotNet),
                            mreturn mMappings.SnMappings.GetImpliedDecimalType()
                        endusing
                    end
                    else
                    begin
                        if (Size<=9) then
                        begin
                            using ToType select
                            (MappedType.CSharp),
                                mreturn mMappings.CsMappings.GetSmallDecimalType()
                            (MappedType.VB),
                                mreturn mMappings.VbMappings.GetSmallDecimalType()
                            (MappedType.SQL),
                                mreturn mMappings.SqlMappings.GetSmallDecimalType()
                            (MappedType.ObjectiveC),
                                mreturn mMappings.OcMappings.GetSmallDecimalType()
                            (MappedType.TypeScript),
                                mreturn mMappings.TsMappings.GetSmallDecimalType()
                            (MappedType.SynergyDotNet),
                                mreturn mMappings.SnMappings.GetSmallDecimalType()
                            endusing
                        end
                        else if (Size <= 18) then
                        begin
                            using ToType select
                            (MappedType.CSharp),
                                mreturn mMappings.CsMappings.GetLargeDecimalType()
                            (MappedType.VB),
                                mreturn mMappings.VbMappings.GetLargeDecimalType()
                            (MappedType.SQL),
                                mreturn mMappings.SqlMappings.GetLargeDecimalType()
                            (MappedType.ObjectiveC),
                                mreturn mMappings.OcMappings.GetLargeDecimalType()
                            (MappedType.TypeScript),
                                mreturn mMappings.TsMappings.GetLargeDecimalType()
                            (MappedType.SynergyDotNet),
                                mreturn mMappings.SnMappings.GetLargeDecimalType()
                            endusing
                        end
                        else
                        begin
                            using ToType select
                            (MappedType.CSharp),
                                mreturn mMappings.CsMappings.GetVeryLargeDecimalType()
                            (MappedType.VB),
                                mreturn mMappings.VbMappings.GetVeryLargeDecimalType()
                            (MappedType.SQL),
                                mreturn mMappings.SqlMappings.GetVeryLargeDecimalType()
                            (MappedType.ObjectiveC),
                                mreturn mMappings.OcMappings.GetVeryLargeDecimalType()
                            (MappedType.TypeScript),
                                mreturn mMappings.TsMappings.GetVeryLargeDecimalType()
                            (MappedType.SynergyDotNet),
                                mreturn mMappings.SnMappings.GetVeryLargeDecimalType()
                            endusing
                        end
                    end
                end
                endusing
            end
            (RpsFieldDataType.Integer),
            begin
                using Size select
                (1),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetInteger1Type()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetInteger1Type()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetInteger1Type()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetInteger1Type()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetInteger1Type()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetInteger1Type()
                    endusing
                end
                (2),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetInteger2Type()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetInteger2Type()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetInteger2Type()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetInteger2Type()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetInteger2Type()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetInteger2Type()
                    endusing
                end
                (4),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetInteger4Type()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetInteger4Type()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetInteger4Type()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetInteger4Type()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetInteger4Type()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetInteger4Type()
                    endusing
                end
                (8),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn mMappings.CsMappings.GetInteger8Type()
                    (MappedType.VB),
                        mreturn mMappings.VbMappings.GetInteger8Type()
                    (MappedType.SQL),
                        mreturn mMappings.SqlMappings.GetInteger8Type()
                    (MappedType.ObjectiveC),
                        mreturn mMappings.OcMappings.GetInteger8Type()
                    (MappedType.TypeScript),
                        mreturn mMappings.TsMappings.GetInteger8Type()
                    (MappedType.SynergyDotNet),
                        mreturn mMappings.SnMappings.GetInteger8Type()
                    endusing
                end
                endusing
            end
            (RpsFieldDatatype.Boolean),
            begin
                using ToType select
                (MappedType.CSharp),
                    mreturn mMappings.CsMappings.GetBooleanType()
                (MappedType.VB),
                    mreturn mMappings.VbMappings.GetBooleanType()
                (MappedType.SQL),
                    mreturn mMappings.SqlMappings.GetBooleanType()
                (MappedType.ObjectiveC),
                    mreturn mMappings.OcMappings.GetBooleanType()
                (MappedType.TypeScript),
                    mreturn mMappings.TsMappings.GetBooleanType()
                (MappedType.SynergyDotNet),
                    mreturn mMappings.SnMappings.GetBooleanType()
                endusing
            end
            (RpsFieldDataType.Enum),    ;Can't currently happen because of %CheckStructure
            begin
                using ToType select
                (MappedType.CSharp),
                    mreturn mMappings.CsMappings.GetEnumType()
                (MappedType.VB),
                    mreturn mMappings.VbMappings.GetEnumType()
                (MappedType.SQL),
                    mreturn mMappings.SqlMappings.GetEnumType()
                (MappedType.ObjectiveC),
                    mreturn mMappings.OcMappings.GetEnumType()
                (MappedType.TypeScript),
                    mreturn mMappings.TsMappings.GetEnumType()
                (MappedType.SynergyDotNet),
                    mreturn mMappings.SnMappings.GetEnumType()
                endusing
            end
            (RpsFieldDataType.Binary),  ;Can't currently happen because of %CheckStructure
            begin
                using ToType select
                (MappedType.CSharp),
                    mreturn mMappings.CsMappings.GetBinaryType()
                (MappedType.VB),
                    mreturn mMappings.VbMappings.GetBinaryType()
                (MappedType.SQL),
                    mreturn mMappings.SqlMappings.GetBinaryType()
                (MappedType.ObjectiveC),
                    mreturn mMappings.OcMappings.GetBinaryType()
                (MappedType.TypeScript),
                    mreturn mMappings.TsMappings.GetBinaryType()
                (MappedType.SynergyDotNet),
                    mreturn mMappings.SnMappings.GetBinaryType()
                endusing
            end
            (RpsFieldDataType.Structfield), ;Can't currently happen because of %CheckStructure
            begin
                using ToType select
                (MappedType.CSharp),
                    mreturn mMappings.CsMappings.GetStructFieldType()
                (MappedType.VB),
                    mreturn mMappings.VbMappings.GetStructFieldType()
                (MappedType.SQL),
                    mreturn mMappings.SqlMappings.GetStructFieldType()
                (MappedType.ObjectiveC),
                    mreturn mMappings.OcMappings.GetStructFieldType()
                (MappedType.TypeScript),
                    mreturn mMappings.TsMappings.GetStructFieldType()
                (MappedType.SynergyDotNet),
                    mreturn mMappings.SnMappings.GetStructFieldType()
                endusing
            end
            (RpsFieldDataType.AutoSequence),
            begin
                using ToType select
                (MappedType.CSharp),
                    mreturn mMappings.CsMappings.GetAutoSequenceType()
                (MappedType.VB),
                    mreturn mMappings.VbMappings.GetAutoSequenceType()
                (MappedType.SQL),
                    mreturn mMappings.SqlMappings.GetAutoSequenceType()
                (MappedType.ObjectiveC),
                    mreturn mMappings.OcMappings.GetAutoSequenceType()
                (MappedType.TypeScript),
                    mreturn mMappings.TsMappings.GetAutoSequenceType()
                (MappedType.SynergyDotNet),
                    mreturn mMappings.SnMappings.GetAutoSequenceType()
                endusing
            end
            (RpsFieldDataType.AutoTime),
            begin
                using ToType select
                (MappedType.CSharp),
                    mreturn mMappings.CsMappings.GetAutoTimeType()
                (MappedType.VB),
                    mreturn mMappings.VbMappings.GetAutoTimeType()
                (MappedType.SQL),
                    mreturn mMappings.SqlMappings.GetAutoTimeType()
                (MappedType.ObjectiveC),
                    mreturn mMappings.OcMappings.GetAutoTimeType()
                (MappedType.TypeScript),
                    mreturn mMappings.TsMappings.GetAutoTimeType()
                (MappedType.SynergyDotNet),
                    mreturn mMappings.SnMappings.GetAutoTimeType()
                endusing
            end
            endusing

            ;If the field has an explicit coercion then use it
            if (CoercedType!=RpsFieldCoercedType.CtNone)
            begin
                using CoercedType select
                (RpsFieldCoercedType.CtByte),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "byte"
                    (MappedType.VB),
                        mreturn "Byte"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "short int"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "byte"
                    endusing
                end
                (RpsFieldCoercedType.CtShort),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "short"
                    (MappedType.VB),
                        mreturn "Short"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "short int"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "short"
                    endusing
                end
                (RpsFieldCoercedType.CtInt),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "int"
                    (MappedType.VB),
                        mreturn "Integer"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "int"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "int"
                    endusing
                end
                (RpsFieldCoercedType.CtLong),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "long"
                    (MappedType.VB),
                        mreturn "Long"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "long int"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "long"
                    endusing
                end
                (RpsFieldCoercedType.CtSbyte),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "sbyte"
                    (MappedType.VB),
                        mreturn "System.SByte"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "unsigned short int"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "System.SByte"
                    endusing
                end
                (RpsFieldCoercedType.CtUshort),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "ushort"
                    (MappedType.VB),
                        mreturn "System.UInt16"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "unsigned short int"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "System.UInt16"
                    endusing
                end
                (RpsFieldCoercedType.CtUint),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "uint"
                    (MappedType.VB),
                        mreturn "System.UInt32"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "unsigned int"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "System.UInt32"
                    endusing
                end
                (RpsFieldCoercedType.CtUlong),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "ulong"
                    (MappedType.VB),
                        mreturn "System.UInt64"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "unsigned long int"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "System.UInt64"
                    endusing
                end
                (RpsFieldCoercedType.CtBoolean),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "bool"
                    (MappedType.VB),
                        mreturn "Boolean"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "BOOL"
                    (MappedType.TypeScript),
                        mreturn "boolean"
                    (MappedType.SynergyDotNet),
                        mreturn "boolean"
                    endusing
                end
                (RpsFieldCoercedType.CtDouble),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "double"
                    (MappedType.VB),
                        mreturn "System.Double"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "double"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "double"
                    endusing
                end
                (RpsFieldCoercedType.CtFloat),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "float"
                    (MappedType.VB),
                        mreturn "System.Single"
                    (MappedType.SQL),
                        nop
                    (MappedType.ObjectiveC),
                        mreturn "float"
                    (MappedType.TypeScript),
                        mreturn "number"
                    (MappedType.SynergyDotNet),
                        mreturn "float"
                    endusing
                end
                (RpsFieldCoercedType.CtNullDateTime),
                begin
                    using ToType select
                    (MappedType.CSharp),
                        mreturn "Nullable<System.DateTime>"
                    (MappedType.VB),
                        mreturn "Nullable(Of System.DateTime)"
                    (MappedType.SQL),
                        mreturn ""
                    (MappedType.ObjectiveC),
                        mreturn "NSDate"
                    (MappedType.TypeScript),
                        mreturn "Date"
                    (MappedType.SynergyDotNet),
                        mreturn "Nullable<System.DateTime>"
                    endusing
                end
                endusing
            end

            mreturn ""

        endmethod

        ;;---------------------------------------------------------------------
        ;; These properties are present because of my specific requirements for
        ;; using this class in CodeGen. In most other scenarios these properties
        ;; should be removed.

        {Category("CodeGen Extensions")}
        {Description("")}
        {ReadOnly(true)}
        ;;; <summary>
        ;;; The base name of the field.
        ;;; Array dimensions are not included in the base name.
        ;;; </summary>
        public readwrite property BaseName, String, String.Empty

        ;;; <summary>
        ;;; Only intended for use when cloning fields.
        ;;; </summary>
        protected property FieldData, string
            method get
            proc
                mreturn (string)mf_info
            endmethod
        endproperty

        {Browsable(false)}

        ;;; <summary>
        ;;; Field number in original repository structure.
        ;;; </summary>
        public readwrite property FieldNumber, int

        {Browsable(false)}

        ;;; <summary>
        ;;; Logical field number, after the expansion of arrays and groups.
        ;;; </summary>
        public readwrite property LogicalFieldNumber, int

        ;;; <summary>
        ;;; The original name of the field, before any renaming by CodeGen.
        ;;; </summary>
        public readwrite property OriginalName, String, String.Empty
        
        ;;; <summary>
        ;;; The original name of the field, before any renaming by CodeGen.
        ;;; This name may include array dimensions.
        ;;; </summary>
        public readwrite property OriginalNameModified, String, String.Empty
        
        ;;; <summary>
        ;;; Synergy data type code
        ;;; </summary>
        public readwrite property TypeCode, string, String.Empty

        ;;; <summary>
        ;;; A descriptive name of the data type (ALPHA, DECIMAL, INTEGER, etc.)
        ;;; </summary>
        public readwrite property TypeName, string, String.Empty

        ;;; <summary>
        ;;; C# data type
        ;;; </summary>
        public readwrite property CsType, string, String.Empty

        ;;; <summary>
        ;;; C# numeric conversion function (e.g. int.TryParse)
        ;;; </summary>
        public readwrite property CsNumericConvert, string, String.Empty

        ;;; <summary>
        ;;; C# Convert method (e.g. Convert.ToInt32)
        ;;; </summary>
        public readwrite property DblNetConverterer, string, String.Empty

        ;;; <summary>
        ;;; VB data type
        ;;; </summary>
        public readwrite property VbType, string, String.Empty

        ;;; <summary>
        ;;; Synergy .NET data type
        ;;; </summary>
        public readwrite property SnType, string, String.Empty

        ;;; <summary>
        ;;; C# default value (based on data type)
        ;;; </summary>
        public readwrite property CsDefault, string, String.Empty

        ;;; <summary>
        ;;; VB default value (based on data type) 
        ;;; </summary>
        public readwrite property VbDefault, string, String.Empty

        ;;; <summary>
        ;;; Synergy .NET default value (based on data type) 
        ;;; </summary>
        public readwrite property SnDefault, string, String.Empty

        ;;; <summary>
        ;;; SQL data type
        ;;; </summary>
        public readwrite property SqlType, string, String.Empty

        ;;; <summary>
        ;;; TypeScript data type
        ;;; </summary>
        public readwrite property TsType, string, String.Empty

        ;;; <summary>
        ;;; TypeScript default value
        ;;; </summary>
        public readwrite property TsDefault, string, String.Empty

        ;;; <summary>
        ;;; Mapped field name
        ;;; </summary>
        public readwrite property MappedField, string, String.Empty

        ;;; <summary>
        ;;; Mapping conversion function
        ;;; </summary>
        public readwrite property MappingFunction, string, String.Empty

        ;;; <summary>
        ;;; Mapping unconversion function
        ;;; </summary>
        public readwrite property UnmappingFunction, string, String.Empty

        ;;; <summary>
        ;;; Auto incrmenting numeric field
        ;;; </summary>
        public readwrite property AutoIncrement, boolean, false

        ;;; <summary>
        ;;; Objective-C data type
        ;;; </summary>
        public readwrite property OcType, string, String.Empty

        ;;; <summary>
        ;;; Objective-C default value type
        ;;; </summary>
        public readwrite property OcDefault, string, String.Empty

        ;;; <summary>
        ;;; Objective-C data type is an object
        ;;; </summary>
        public readwrite property OcObject, boolean, false

        ;;; <summary>
        ;;; (CodeGen Specific)
        ;;; Indicates that the field was created when an array field
        ;;; was expanded into multiple individual fields
        ;;; </summary>
        public readwrite property WasArrayElement, boolean, false

        ;;; <summary>
        ;;; (CodeGen Specific)
        ;;; For array fields which have been expanded out to multiple
        ;;; individual fields, this property exposes the fields original
        ;;; array element number. A value of 0 indicates that the field
        ;;; is not an expanded array field.
        ;;; </summary>
        public readwrite property OriginalElement, [#]int, new int[4]

        ;;; <summary>
        ;;; (CodeGen Specific)
        ;;; A name for the field which is compatible with xfODBC column names.
        ;;; </summary>
        public readwrite property OdbcName, string, String.Empty

        ;;; <summary>
        ;;; (CodeGen Specific)
        ;;; A name for the field which is compatible with SQL databases,
        ;;; and other environments where path names and array dimensions
        ;;; are not allowed.
        ;;; </summary>
        public readwrite property SqlName, string, String.Empty

    endclass

endnamespace
