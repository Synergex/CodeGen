;;*****************************************************************************
;;
;; Title:       RpsStructure.dbl
;;
;; Type:        Class
;;
;; Description: Represents a single Repository structure definition
;;
;; Date:        19th October 2007
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import CodeGen.RepositoryAPI
import Newtonsoft.Json
import Newtonsoft.Json.Converters

namespace CodeGen.RepositoryAPI

    ;;; <summary>
    ;;; Represents a repository STRUCTURE
    ;;; </summary>
    public partial class RpsStructure

        protected mRepository, @Repository

        public override method ToString, String
            endparams
        proc
            mreturn string.Format("RpsStructure: {0}",mStructureName)
        endmethod

        ;; Structure attribute data
        protected ms_info           ,s_info
        protected mStructureName    ,String
        protected mDescription      ,String
        protected mLongDescription  ,String
        protected mUserText         ,String
        protected mFields           ,@RpsFieldCollection
        protected mKeys             ,@RpsKeyCollection
        protected mFiles            ,@RpsFileCollection
        protected mTags             ,@RpsTagCollection
        protected mFormats          ,@RpsFormatCollection
        protected mRelations        ,@RpsRelationCollection

        ;;; <summary>
        ;;; Default constructor. Creates an empty structure.
        ;;; </summary>
        public method RpsStructure
            required in aRepository, @Repository
        proc
            mRepository = aRepository
        endmethod

        ;;; <summary>
        ;;; Load structure by name.
        ;;; </summary>
        ;;; <param name="StructureName">Structure name</param>
        ;;; <param name="UseAlternateFieldNames">Should alternate field names be used (default is no)</param>
        public method RpsStructure
            required in aRepository, @Repository
            required in StructureName, string
            default  in UseAlternateFieldNames, Boolean, false
            endparams
            record
                pos ,int
                str ,string
                grp ,string
            endrecord
        proc
            mRepository = aRepository
            mDescription = ""
            mLongDescription = ""
            mUserText = ""

            str = StructureName.Trim().ToUpper()
            grp = ""

            mRepository.CheckIsOpen()

            ;; Do we have a period in the requested structure name?
            if (pos=%instr(1,str,"."))
            begin
                if ((pos>1)&&(pos<str.Length)) then
                begin
                    grp = str(pos+1,str.Length)
                    str = str(1:pos-1)
                end
                else
                    throw new RpsStructureException("Invalid group path "+str)
            end

            ;; Load the structure
            LoadStructure(str,UseAlternateFieldNames)

            ;; If we're using an implicit group then adjust the structure accordingly
            if (grp.Length)
            begin
                data ix, int
                data gf, @RpsField
                data cf, @RpsField
                data newLen, int

                ;; Remove all fields except for the specified group
                ix = -1
                while ((ix+=1)<this.Fields.Count)
                begin
                    if (this.Fields[ix].Name.eqs.grp) then
                        gf = mFields[ix]
                    else
                    begin
                        mFields.RemoveAt(ix)
                        ix-=1
                    end
                end

                ;;Make sure the specified group exists and is an explicit group
                if (gf==^null) then
                    throw new RpsFieldNotFoundException(str,grp)
                else
                begin
                    if (!gf.IsGroup)
                        throw new RpsFieldException("Field "+str+"."+grp+" is not a group.")
                    if (gf.GroupStructure)
                        throw new RpsFieldException("Field "+str+"."+grp+" is an implicit group. Generate from structure "+gf.GroupStructure+" instead.")
                end

                ;; Use information from the group field to re-configure the structure
                this.Name = gf.Name
                this.Alias = gf.Name
                this.Description = gf.Description
                this.LongDescription = gf.LongDescription
                this.ChildCount = gf.GroupFields.Count
                this.FileType = "ASCII"
                this.UserText = gf.UserText
                this.FirstFile = String.Empty

                this.mKeys = new RpsKeyCollection(mRepository)
                this.mFiles = new RpsFileCollection(mRepository)
                this.mTags = new RpsTagCollection(mRepository)
                this.mFormats = new RpsFormatCollection(mRepository)
                this.mRelations = new RpsRelationCollection(mRepository)

                this.TagType = RpsTagType.None
                this.DisplayField = String.Empty
                this.MappedStructure = String.Empty
                this.MappedFileSpec = String.Empty

                ;; Move the group's fields up into the structure
                foreach cf in gf.GroupFields
                    this.Fields.Add(cf)

                ;; And remove the group field
                this.Fields.RemoveAt(0)

                ;; Set the new structure length
                ix=-1
                newLen=0
                while ((ix+=1)<mFields.Count)
                    newLen+=this.Fields[ix].Size

                this.Length = newLen

                this.IsFake = true

            end

        endmethod

        ;;; <summary>
        ;;; Load structure by name, fields passed in.
        ;;; This constructor loads a real repository structure, but then replaces its fields collection
        ;;; with a collection of fields that is provided. This is primarily used by CodeGen when doing
        ;;; field subset processing.
        ;;; </summary>
        ;;; <param name="StructureName">Structure name</param>
        ;;; <param name="Fields">Collection of fields to assign.</param>
        public method RpsStructure
            required in aRepository, @Repository
            required in StructureName, string
            required in Fields, @RpsFieldCollection
            endparams
            record
                str ,string
            endrecord
        proc
            mDescription = ""
            mLongDescription = ""
            mUserText = ""

            str = StructureName.Trim().ToUpper()
            mFields = Fields
            mRepository.CheckIsOpen()
            LoadStructure(str)
        endmethod

        ;;; <summary>
        ;;; Create a "fake" structure with a name and passed in fields collection.
        ;;; This is used orimarily for CodeGen EXPLICIT GROUP processing
        ;;; </summary>
        ;;; <param name="Fields">Collection of fields to assign.</param>
        ;;; <param name="StructureName">Structure name</param>
        public method RpsStructure
            required in aRepository, @Repository
            required in aFields, @RpsFieldCollection
            required in aStructureName, string
            endparams
            record
                str ,string
            endrecord
        proc
            mStructureName = aStructureName.Trim().ToUpper()
            mDescription = String.Empty
            mLongDescription = String.Empty
            mUserText = String.Empty
            mFields = aFields
            mKeys = new RpsKeyCollection(mRepository)
            mFiles = new RpsFileCollection(mRepository)
            mTags = new RpsTagCollection(mRepository)
            mFormats = new RpsFormatCollection(mRepository)
            mRelations = new RpsRelationCollection(mRepository)

            FileType = "USER DEFINED"
            Length = 0
            data tmpField, @RpsField
            foreach tmpField in aFields
            begin
                Length += tmpField.Size
            end
            ChildCount = aFields.Count
            TagType = RpsTagType.None
            FirstFile = String.Empty

            mStructureAlias = String.Empty
            mMappedStructure = String.Empty
            mMappedFileSpec = String.Empty
            mDisplayField = String.Empty
            mIsFake = true

        endmethod

        ;; Destructor
        method ~RpsStructure
        proc
            clear mFields, mKeys, mFiles, mTags, mFormats, mRelations
        endmethod

        ;; LoadStructure method
        private method LoadStructure, void
            required in StructureName, string
            default  in UseAlternateFieldNames, Boolean, false
            endparams
        proc
            ;; Save the structure name
            mStructureName = StructureName

            ;; Load structure information
            dd_struct(mRepository.RpsControl,DDS_INFO,mStructureName,ms_info)
            if (mRepository.RpsControl.error)
                throw new RpsStructureNotFoundException(mStructureName)

            ;; Load the structures text-based attributes

            ;; Description
            if (ms_info.si_desc)
            begin
                data tmpDescription, a40
                xcall dd_struct(mRepository.RpsControl,DDS_TEXT,ms_info.si_desc,tmpDescription)
                if (mRepository.RpsControl.error) then
                    throw new RpsStructureException("Failed to get description for repository structure "+mStructureName)
                else
                    mDescription = %atrim(tmpDescription)
            end

            ;; Long description
            if (ms_info.si_ldesc)
            begin
                data tmpDescription, a1800
                dd_struct(mRepository.RpsControl,DDS_TEXT,ms_info.si_ldesc,tmpDescription)
                if (mRepository.RpsControl.error) then
                    throw new RpsStructureException("Failed to get long description for repository structure "+mStructureName)
                else
                    mLongDescription = %atrim(tmpDescription)
            end

            ;; User text string
            if (ms_info.si_utext)
            begin
                data tmpUserText, a60
                dd_struct(mRepository.RpsControl,DDS_TEXT,ms_info.si_utext,tmpUserText)
                if (mRepository.RpsControl.error) then
                    throw new RpsStructureException("Failed to get user text for repository structure "+mStructureName)
                else
                    mUserText = %atrim(tmpUserText)
            end

            ;; If we don't already have a fields collection (because it was
            ;; passed into the constructor, then load the fields from RPS
            if (mFields==^null)
                mFields = new RpsFieldCollection(mRepository,RpsFieldCollectionMode.Structure,mStructureName,UseAlternateFieldNames)

            ;; Now load the other collection properties

            mKeys = new RpsKeyCollection(mRepository,mStructureName)
            mFiles = new RpsFileCollection(mRepository,mStructureName,UseAlternateFieldNames)
            mTags = new RpsTagCollection(mRepository,mStructureName)
            mFormats = new RpsFormatCollection(mRepository,mStructureName)
            mRelations = new RpsRelationCollection(mRepository,mStructureName)

            ;; CodeGen specific attributes
            loadCodeGenData(StructureName)

        endmethod

        ;;---------------------------------------------------------------------
        ;;Public properties to expose the structures raw DDLIB data

        public property ddlib_s_info, s_info
            method get
            proc
                mreturn ms_info
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;; Public properties to expose the structures attributes

        ;;; <summary>
        ;;; Fields that belong to the structure
        ;;; </summary>
        public property Fields, @RpsFieldCollection
            method get
            proc
                mreturn mFields
            endmethod
        endproperty

        ;;; <summary>
        ;;; Keys that are defined in the structure
        ;;; </summary>
        public property Keys, @RpsKeyCollection
            method get
            proc
                mreturn mKeys
            endmethod
        endproperty

        {JsonIgnore}
        ;;; <summary>
        ;;; Files that the structure is assigned to
        ;;; </summary>
        public property Files, @RpsFileCollection
            method get
            proc
                mreturn mFiles
            endmethod
        endproperty

        ;;; <summary>
        ;;; Tage that are defined in the structure
        ;;; </summary>
        public property Tags, @RpsTagCollection
            method get
            proc
                mreturn mTags
            endmethod
        endproperty

        ;;; <summary>
        ;;; Formats that are defined in the structure
        ;;; </summary>
        public property Formats, @RpsFormatCollection
            method get
            proc
                mreturn mFormats
            endmethod
        endproperty

        ;;; <summary>
        ;;; Relationships to other structures
        ;;; </summary>
        public property Relations, @RpsRelationCollection
            method get
            proc
                mreturn mRelations
            endmethod
        endproperty

        ;;; <summary>
        ;;; Structure name
        ;;; </summary>
        public property Name, String
            method get
            proc
                mreturn mStructureName
            endmethod
            private method set
            proc
                mStructureName = value.Trim().ToUpper()
            endmethod
        endproperty

        ;;; <summary>
        ;;; Associated file type
        ;;; </summary>
        public property FileType, string
            method get
            proc
                mreturn %atrim(ms_info.si_filtyp)
            endmethod
            private method set
            proc
                ms_info.si_filtyp = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Description
        ;;; </summary>
        public property Description, String
            method get
            proc
                mreturn mDescription
            endmethod
            private method set
            proc
                mDescription = value.Trim()
            endmethod
        endproperty

        ;;; <summary>
        ;;; Long description
        ;;; </summary>
        public property LongDescription, String
            method get
            proc
                mreturn mLongDescription
            endmethod
            private method set
            proc
                mLongDescription = value.Trim()
            endmethod
        endproperty

        ;;; <summary>
        ;;; User defined text
        ;;; </summary>
        public property UserText, String
            method get
            proc
                mreturn mUserText
            endmethod
            private method set
            proc
                mUserText = value.Trim()
            endmethod
        endproperty

        ;;; <summary>
        ;;; Record length
        ;;; </summary>
        public property Length, int
            method get
            proc
                mreturn ms_info.si_recsz
            endmethod
            private method set
            proc
                ms_info.si_recsz = value
            endmethod
        endproperty

        ;;; <summary>
        ;;; Number of top level fields or groups
        ;;; </summary>
        public property ChildCount, int
            method get
            proc
                mreturn ms_info.si_childct
            endmethod
            private method set
            proc
                ms_info.si_childct = value
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Tag type (if any)
        ;;; </summary>
        public property TagType, RpsTagType
            method get
            proc
                mreturn (RpsTagType)integer(ms_info.si_tagtyp)
            endmethod
            private method set
            proc
                ms_info.si_tagtyp = %integer(value)
            endmethod
        endproperty

        {JsonIgnore}
        ;;; <summary>
        ;;; First (or only) file assigned to
        ;;; </summary>
        public property FirstFile, String
            method get
            proc
                mreturn %atrim(ms_info.si_file)
            endmethod
            private method set
            proc
                ms_info.si_file = value
            endmethod
        endproperty

    endclass

    public partial class RpsStructure
        
        ;; CodeGen specific attribute data
        protected mStructureAlias   ,String     ;;Structure alias (CodeGen)
        protected mMappedStructure  ,String     ;;Name of mapped structure
        protected mMappedFileSpec   ,String     ;;File spec of mapped file
        protected mDisplayField     ,String     ;;Name of display field
        protected mIsFake           ,boolean    ;;Structure is fake (not in repository)
        
        private method loadCodeGenData, void
            required in StructureName, string
            endparams
        proc
            ;; Default the alias to the same as the structure name
            mStructureAlias = mStructureName

            ;; Load mapped structure
            mMappedStructure = RpsUtils.GetMappedStructure(mStructureName,mUserText,mLongDescription)
            
            ;; Load file associated with mapped structure
            if (mMappedStructure) then
            begin
                data tmp_sinfo  ,s_info
                data tmp_flinfo ,fl_info
                
                ;; Get the structure info for the mapped structure
                xcall dd_struct(mRepository.RpsControl,DDS_INFO,mMappedStructure,tmp_sinfo)
                
                ;; Get the file info for the first (or only) file
                ;; TODO: Shouldn't need the ^a cast but .NET won't work without it.
                xcall dd_file(mRepository.RpsControl,DDL_INFO,tmp_sinfo.si_file,^a(tmp_flinfo))
                
                mMappedFileSpec = %atrim(tmp_flinfo.fli_fname)
                
            end
            else
                mMappedFileSpec = String.Empty
            
        endmethod
        
        ;;---------------------------------------------------------------------
        ;; Public properties to expose the structures attributes
        
        ;;; <summary>
        ;;; Structure alias
        ;;; </summary>
        public property Alias, String
            method get
            proc
                mreturn mStructureAlias
            endmethod
            method set
            proc
                mStructureAlias = value.Trim()
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Name of mapped structure (@MAP=structure; in user text)
        ;;; </summary>
        public property MappedStructure, String
            method get
            proc
                mreturn mMappedStructure
            endmethod
            private method set
            proc
                mMappedStructure = value.Trim()
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Mapped file specification (from MappedStruct)
        ;;; </summary>
        public property MappedFileSpec, String
            method get
            proc
                mreturn mMappedFileSpec
            endmethod
            private method set
            proc
                mMappedFileSpec = value.Trim()
            endmethod
        endproperty
        
        ;;; <summary>
        ;;; Name of strucures display field (@CODEGEN_DISPLAY_FIELD in a fields user text)
        ;;; </summary>
        public property DisplayField, String
            method get
            proc
                if (mDisplayField==^null)
                    mDisplayField=""
                mreturn mDisplayField
            endmethod
            method set
            proc
                mDisplayField = value.Trim()
            endmethod
        endproperty

        {JsonIgnore}
        ;;; <summary>
        ;;; Is this a "fake" structure (i.e. does not exist in repository)
        ;;; </summary>
        public property IsFake, boolean
            method get
            proc
                mreturn mIsFake
            endmethod
            private method set
            proc
                mIsFake = value
            endmethod
        endproperty
        
    endclass

endnamespace
