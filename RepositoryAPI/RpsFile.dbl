;;*****************************************************************************
;;
;; Title:       RpsFile.dbl
;;
;; Type:        Class
;;
;; Description: Represents a single Repository file definition
;;
;; Date:        19th October 2007
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import CodeGen.RepositoryAPI
import Newtonsoft.Json
import Newtonsoft.Json.Converters
import System.Collections.Generic

namespace CodeGen.RepositoryAPI

    public class RpsFile

        protected mRepository, @Repository

        public override method ToString, String
            endparams
        proc
            mreturn String.Format("RpsFile: {0}",this.Name)
        endmethod

        ;;File attribute data
        protected mfl_info          ,fl_info
        protected mKeys             ,@RpsKeyCollection
        protected mStructures       ,@RpsStructureCollection
        protected mStructureNames	,@List<string>
        protected mOdbcTableNames	,@List<string>

        private mUseAltrernateFieldNames, boolean

        ;; Constructor
        public method RpsFile
            required in aRepository, @Repository
            required in FileName, String
            default  in UseAltrernateFieldNames, Boolean, false
            endparams
        proc
            mRepository = aRepository
            mUseAltrernateFieldNames = UseAltrernateFieldNames
            mRepository.CheckIsOpen()
            LoadFile(FileName)
        endmethod

        ;; LoadFile method
        private method LoadFile, void
            required in FileName, String
            endparams
        proc
            ;;Save the file name
            this.Name = FileName.Trim().ToUpper()

            ;;Load file information
            dd_file(mRepository.RpsControl,DDL_INFO,this.Name,^a(mfl_info))
            if (mRepository.RpsControl.error)
                throw new RpsFileException("Failed to get information for repository file "+this.Name)

            ;;Load description
            if (mfl_info.fli_desc)
            begin
                data tmpDescription, a40
                xcall dd_file(mRepository.RpsControl,DDL_TEXT,mfl_info.fli_desc,tmpDescription)
                if (mRepository.RpsControl.error)
                    throw new RpsFileException("Failed to get description for repository file "+this.Name)
                this.Description = %atrim(tmpDescription)
            end

            ;;Load long description
            if (mfl_info.fli_ldesc)
            begin
                data tmpLongDescription, a1800
                dd_file(mRepository.RpsControl,DDL_TEXT,mfl_info.fli_ldesc,tmpLongDescription)
                if (mRepository.RpsControl.error)
                    throw new RpsFileException("Failed to get long description for repository file "+this.Name)
                this.LongDescription = %atrim(tmpLongDescription)
            end

            ;;Load user text
            if (mfl_info.fli_utext)
            begin
                data tmpUserText, a60
                dd_file(mRepository.RpsControl,DDL_TEXT,mfl_info.fli_utext,tmpUserText)
                if (mRepository.RpsControl.error)
                    throw new RpsFileException("Failed to get user text for repository file "+this.Name)
                this.UserText = %atrim(tmpUserText)
            end

            ;;Load portable integer specs
            if (mfl_info.fli_portable)
            begin
                data tmpPortableInts, a120
                dd_file(mRepository.RpsControl,DDL_TEXT,mfl_info.fli_portable,tmpPortableInts)
                if (mRepository.RpsControl.error)
                    throw new RpsFileException("Failed to get portable integer specifications for repository file "+this.Name)
                this.PortableIntsSpecs = %atrim(tmpPortableInts)
            end

            ;;Load structure names and ODBC table names

            mStructureNames = new List<String>()
            mOdbcTableNames = new List<String>()

            if (mfl_info.fli_nmstructs)
            begin
                data strNames,  D_HANDLE, %mem_proc(DM_ALLOC,^size(strIdentifier)*mfl_info.fli_nmstructs)
                data odbcNames, D_HANDLE, %mem_proc(DM_ALLOC,^size(strIdentifier)*mfl_info.fli_nmstructs)

                xcall dd_file(mRepository.RpsControl,DDL_STRS,mfl_info.fli_nmstructs,^m(strIdentifier,strNames),,,^m(strIdentifier,odbcNames))

                data strName, string
                data odbcName, string

                data ix, int
                for ix from 1 thru mfl_info.fli_nmstructs
                begin
                    strName = %atrim(^m(strIdentifier[ix],strNames))
                    odbcName = %atrim(^m(strIdentifier[ix],odbcNames))
                    if (String.IsNullOrWhiteSpace(odbcName))
                        odbcName = strName
                    mStructureNames.Add(strName)
                    mOdbcTableNames.Add(odbcName)
                end

                strNames  = %mem_proc(DM_FREE,strNames)
                odbcNames = %mem_proc(DM_FREE,odbcNames)
            end

            ;;Defualt the file's key density to 50% if not specified
            if (!mfl_info.fli_density)
                mfl_info.fli_density = 50

        endmethod

        ;;---------------------------------------------------------------------
        ;;Public properties to expose the files raw DDLIB data

        public property ddlib_fl_info, fl_info
            method get
            proc
                mreturn mfl_info
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;Public properties to expose the files attributes to the outside world

        ;;; <summary>
        ;;; Repository file name
        ;;; </summary>
        public readwrite property Name, String, String.Empty

        ;;; <summary>
        ;;; Desctiption
        ;;; </summary>
        public readwrite property Description, String, String.Empty

        ;;; <summary>
        ;;; Long description
        ;;; </summary>
        public readwrite property LongDescription, String, String.Empty

        ;;; <summary>
        ;;; User text string
        ;;; </summary>
        public readwrite property UserText, String, String.Empty

        ;;; <summary>
        ;;; Portable integer specifications
        ;;; </summary>
        public readwrite property PortableIntsSpecs, String, String.Empty

        ;;; <summary>
        ;;; Timestamp of last modification
        ;;; </summary>
        public property LastModified, String
            method get
            proc
                mreturn %atrim(mfl_info.fli_tstamp)
            endmethod
        endproperty

        ;;; <summary>
        ;;; File type (a15, e.g., "DBL ISAM", "ASCII")
        ;;; </summary>
        public property FileType, String
            method get
            proc
                mreturn %atrim(mfl_info.fli_filtyp)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Actual filename
        ;;; </summary>
        public property FileSpec, String
            method get
            proc
                mreturn %atrim(mfl_info.fli_fname)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Is file definition temporary?
        ;;; </summary>
        public property TempFile, boolean
            method get
            proc
                mreturn mfl_info.fli_temp
            endmethod
        endproperty

        ;;; <summary>
        ;;; Number of structures assigned to the file
        ;;; </summary>
        public property StructureCount, int
            method get
            proc
                mreturn mfl_info.fli_nmstructs
            endmethod
        endproperty

        ;;; <summary>
        ;;; First (or only) assigned structure
        ;;; </summary>
        public property FirstStructure, String
            method get
            proc
                mreturn %atrim(mfl_info.fli_struct)
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Record type
        ;;; </summary>
        public property RecordType, RpsRecordType
            method get
            proc
                mreturn (RpsRecordType)integer(mfl_info.fli_rectyp)
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Page (index block) size
        ;;; </summary>
        public property PageSize, RpsFilePageSize
            method get
            proc
                mreturn (RpsFilePageSize)integer(mfl_info.fli_pagesize)
            endmethod
        endproperty

        ;;; <summary>
        ;;; File density
        ;;; </summary>
        public property Density, int
            method get
            proc
                mreturn mfl_info.fli_density
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; File addressing
        ;;; </summary>
        public property Addressing, RpsFileAddressing
            method get
            proc
                mreturn (RpsFileAddressing)integer(mfl_info.fli_addressing)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Compress record data?
        ;;; </summary>
        public property RecordCompression, boolean
            method get
            proc
                mreturn mfl_info.fli_compress
            endmethod
        endproperty

        ;;; <summary>
        ;;; Static RFA's?
        ;;; </summary>
        public property StaticRFA, boolean
            method get
            proc
                mreturn mfl_info.fli_staticrfa
            endmethod
        endproperty

        ;;; <summary>
        ;;; Change tracking?
        ;;; </summary>
        public property ChangeTracking, boolean
            method get
            proc
                mreturn mfl_info.fli_track
            endmethod
        endproperty

        ;;; <summary>
        ;;; Stored GRFAs?
        ;;; </summary>
        public property StoredGRFA, boolean
            method get
            proc
                mreturn mfl_info.fli_sgrfa
            endmethod
        endproperty

        {JsonIgnore}
        ;;; <summary>
        ;;; Keys collection - if there is a structure assigned
        ;;; </summary>
        public property Keys, @RpsKeyCollection
            method get
            proc
                if ((mKeys==^null)&&(mfl_info.fli_struct))
                    mkeys = new RpsKeyCollection(mRepository,mfl_info.fli_struct)
                mreturn mKeys
            endmethod
        endproperty

        {JsonIgnore}
        ;;; <summary>
        ;;; Collection of structures assigned to the file
        ;;; </summary>
        public property Structures, @RpsStructureCollection
            method get
            proc
                if (mStructures==^null)
                    mStructures = new RpsStructureCollection(mRepository,this.Name,mUseAltrernateFieldNames)
                mreturn mStructures
            endmethod
        endproperty

        ;;; <summary>
        ;;; Collection of assigned structure NAMES and ODBC TABLE NAMES 
        ;;; </summary>
        public property StructureNames, @List<string>
            method get
            proc
                mreturn mStructureNames
            endmethod
        endproperty

        ;;; <summary>
        ;;; Collection of assigned structure NAMES and ODBC TABLE NAMES 
        ;;; </summary>
        public property OdbcTableNames, @List<string>
            method get
            proc
                mreturn mOdbcTableNames
            endmethod
        endproperty

    endclass

endnamespace

