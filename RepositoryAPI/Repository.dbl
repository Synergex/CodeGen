;;*****************************************************************************
;;
;; Title:       Repository.dbl
;;
;; Type:        Class
;;
;; Description: Access a Synergy/DE Repository (via ddlib.elb)
;;
;; Date:        19th October 2007
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

namespace CodeGen.RepositoryAPI

    .define DDINFO_STRUCTURE
    .define DDINFO_DEFINES_ONLY
    .include "RPSLIB:ddinfo.def"
    .undefine DDINFO_DEFINES_ONLY
    .undefine DDINFO_STRUCTURE

    public class Repository implements IDisposable

        public RpsControl               ,dcs

        private mStructures             ,@RpsStructureCollection
        private mFiles                  ,@RpsFileCollection
        private mTemplates              ,@RpsTemplateCollection
        private mFormats                ,@RpsFormatCollection
        private mDateFormats            ,@RpsFormatCollection
        private mTimeFormats            ,@RpsFormatCollection
        private mEnumerations           ,@RpsEnumCollection

        private mUseAlternateFieldNames, boolean

        ;;---------------------------------------------------------------------
        ;;Constructors

        ;;; <summary>
        ;;; Default constructor. Creates an empty repository heirarchy.
        ;;; </summary>
        public method Repository
            endparams
        proc
            
        endmethod

        ;;; <summary>
        ;;; Open the default repository
        ;;; </summary>
        ;;; <param name="UseAlternateFieldNames">Should alternate field names be used in place of actual field names?</param>
        public method Repository
            default in UseAlternateFieldNames, boolean, false
            endparams
        proc
            mUseAlternateFieldNames = UseAlternateFieldNames
            OpenRps()
        endmethod

        ;;; <summary>
        ;;; Open a specified repository
        ;;; </summary>
        ;;; <param name="MainFile">Repository main file</param>
        ;;; <param name="TextFile">Repository text file</param>
        ;;; <param name="UseAlternateFieldNames">Should alternate field names be used in place of actual field names?</param>
        public method Repository
            required in MainFile, String
            required in TextFile, String
            default  in UseAlternateFieldNames, boolean, false
            endparams
        proc
            mUseAlternateFieldNames = UseAlternateFieldNames
            OpenRps(MainFile,TextFile)
        endmethod

        ;----------------------------------------------------------------------
        ; Implement IDisposable

        public method Dispose, void
        proc
            CloseRps()
        endmethod
            
        ;;---------------------------------------------------------------------
        ;;Private methods

        ;;; <summary>
        ;;; Open the default repository
        ;;; </summary>
        private method OpenRps, void
            endparams
            record
                tmpMainFile, a255
                tmpTextFile, a255
            endrecord
        proc
            xcall dd_init(RpsControl,,,tmpMainFile,tmpTextFile)
            if (RpsControl.error) then
                throw new RpsException("Failed to open repository")
            else
            begin
                this.MainFile = %atrim(tmpMainFile)
                this.TextFile = %atrim(tmpTextFile)
            end
            GetControlRecord()
        endmethod

        ;;; <summary>
        ;;; Open a specific repository
        ;;; </summary>
        ;;; <param name="aMainFile">Repository main file</param>
        ;;; <param name="aTextFile">Repository text file</param>
        private method OpenRps, void
            required in aMainFile, a
            required in aTextFile, a
            endparams
            record
                tmpMainFile, a255
                tmpTextFile, a255
            endrecord
        proc
            xcall dd_init(RpsControl,aMainFile,aTextFile,tmpMainFile,tmpTextFile)
            if (RpsControl.error) then
                throw new RpsException("Failed to open repository")
            else
            begin
                this.MainFile = %atrim(tmpMainFile)
                this.TextFile = %atrim(tmpTextFile)
            end
            GetControlRecord()
        endmethod

        ;;; <summary>
        ;;; Get the control record from the currently open repository
        ;;; </summary>
        private method GetControlRecord, void
            endparams
        proc
            data cinfo, c_info

            xcall dd_control(RpsControl,DDC_INFO,cinfo)

            if (RpsControl.error)
                throw new RpsException("Failed to get repository control record")

            this.LastModified = cinfo.ci_tstamp
            this.LastStructureAddDelete = cinfo.ci_str_tstamp
            this.Version = %atrim(cinfo.ci_ver)

        endmethod

        ;;; <summary>
        ;;; Close the current repository
        ;;; </summary>
        private method CloseRps, void
            endparams
        proc
            ;;If it looks like the repository is open
            if ((RpsControl.mchn_r)&&(%chopen(RpsControl.mchn_r))
            &    &&(RpsControl.tchn_r)&&(%chopen(RpsControl.tchn_r)))
            begin
                ;;Close it
                try
                    xcall dd_exit(RpsControl)
                catch (ex)
                    nop
                endtry
            end

            ;;And clear down our instance data
            init RpsControl

            clear mStructures  
            clear mFiles       
            clear mTemplates   
            clear mFormats     
            clear mDateFormats 
            clear mTimeFormats 
            clear mEnumerations

        endmethod

        ;;---------------------------------------------------------------------
        ;;Public methods

        ;;; <summary>
        ;;; Check the repository is open. Other classes can use this method to
        ;;; open the Repository if it is not already open.  This would be the
        ;;; case if an instance of the Repository class had not been created.
        ;;; For example, a programmer might want to use an instance of a
        ;;; RpsStructure class without having to instantiate the Repository class.
        ;;; </summary>
        public method CheckIsOpen, void
            endparams
        proc
            if ((RpsControl.mchn_r)&&(%chopen(RpsControl.mchn_r))
            &    &&(RpsControl.tchn_r)&&(%chopen(RpsControl.tchn_r)))
                mreturn
            xcall dd_init(RpsControl)
            if (RpsControl.error)
                throw new RpsException("Failed to open repository")
        endmethod

        ;;; <summary>
        ;;; Close the current repository and open the default one
        ;;; </summary>
        public method Open, void
            endparams
        proc
            CloseRps()
            OpenRps()
        endmethod

        ;;; <summary>
        ;;; Close the current repository and open a specified one
        ;;; </summary>
        ;;; <param name="aMainFile">Repository main file</param>
        ;;; <param name="aTextFile">Repository text file</param>
        public method Open, void
            required in aMainFile, a
            required in aTextFile, a
            endparams
        proc
            CloseRps()
            OpenRps(aMainFile,aTextFile)
        endmethod

        ;;---------------------------------------------------------------------
        ;;Public properties

        ;;; <summary>
        ;;; Repository main file spec
        ;;; </summary>
        public setprivate property MainFile, String

        ;;; <summary>
        ;;; Repository text file spec
        ;;; </summary>
        public setprivate property TextFile, String

        ;;; <summary>
        ;;; Last modification timestamp (a14, YYYYMMDDHHMMSS)
        ;;; </summary>
        public setprivate property LastModified, String

        ;;; <summary>
        ;;; Last structure addition / deletion (a14, YYYYMMDDHHMMSS)
        ;;; </summary>
        public setprivate property LastStructureAddDelete, String

        ;;; <summary>
        ;;; Repository version
        ;;; </summary>
        public setprivate property Version, String

        ;;---------------------------------------------------------------------
        ;;Structures

        ;;; <summary>
        ;;; Collection of structures in the repository
        ;;; </summary>
        public property Structures, @RpsStructureCollection
            method get
            proc
                ;Load the structures collection the first time it is referenced
                if (mStructures==^null)
                    mStructures = new RpsStructureCollection(this,RpsLoadMode.Load)
                mreturn mStructures
            endmethod
        endproperty

        ;;; <summary>
        ;;; Retrieve a named structure
        ;;; </summary>
        ;;; <param name="StructureName">Name of structure to retrieve</param>
        ;;; <returns>Repository structure object</returns>
        public method GetStructure, @RpsStructure
            required in StructureName, String
            endparams
        proc
            mreturn new RpsStructure(this,StructureName,mUseAlternateFieldNames)
        endmethod

        ;;---------------------------------------------------------------------
        ;;Files

        ;;; <summary>
        ;;; Collection of files in the repository
        ;;; </summary>
        public property Files, @RpsFileCollection
            method get
            proc
                ;Load the files collection the first time it is referenced
                if (mFiles==^null)
                    mFiles = new RpsFileCollection(this,RpsLoadMode.Load,mUseAlternateFieldNames)
                mreturn mFiles
            endmethod
        endproperty

        ;;; <summary>
        ;;; Retrieve a named file definition
        ;;; </summary>
        ;;; <param name="FileName">Name of file definition to retrieve</param>
        ;;; <returns>Repository file object</returns>
        public method GetFile, @RpsFile
            required in FileName, String
            endparams
        proc
            mreturn new RpsFile(this,FileName,mUseAlternateFieldNames)
        endmethod

        ;;---------------------------------------------------------------------
        ;;Templates

        ;;; <summary>
        ;;; Collection of templates in the repository
        ;;; </summary>
        public property Templates, @RpsTemplateCollection
            method get
            proc
                ;Load the templates collection the first time it is referenced
                if (mTemplates==^null)
                    mTemplates = new RpsTemplateCollection(this)
                mreturn mTemplates
            endmethod
        endproperty

        ;;; <summary>
        ;;; Retrieve a named template
        ;;; </summary>
        ;;; <param name="TemplateName">Name of template to retrieve</param>
        ;;; <returns>Repository template object</returns>
        public method GetTemplate, @RpsTemplate
            required in TemplateName, String
            endparams
        proc
            mreturn new RpsTemplate(this,TemplateName)
        endmethod

        ;;---------------------------------------------------------------------
        ;;Formats

        ;;; <summary>
        ;;; Collection of global formats in the repository
        ;;; </summary>
        public property Formats, @RpsFormatCollection
            method get
            proc
                ;Load the formats collection the first time it is referenced
                if (mFormats==^null)
                    mFormats = new RpsFormatCollection(this,RpsGlobalFormatType.Format)
                mreturn mFormats
            endmethod
        endproperty

        ;;; <summary>
        ;;; Collection of pre-defined date formats
        ;;; </summary>
        public property DateFormats, @RpsFormatCollection
            method get
            proc
                ;Load the date formats collection the first time it is referenced
                if (mDateFormats==^null)
                    mDateFormats = new RpsFormatCollection(this,RpsGlobalFormatType.DateFormat)
                mreturn mDateFormats
            endmethod
        endproperty

        ;;; <summary>
        ;;; Collection of pre-defined time formats
        ;;; </summary>
        public property TimeFormats, @RpsFormatCollection
            method get
            proc
                ;Load the time formats collection the first time it is referenced
                if (mTimeFormats==^null)
                    mTimeFormats = new RpsFormatCollection(this,RpsGlobalFormatType.TimeFormat)
                mreturn mTimeFormats
            endmethod
        endproperty

        ;;; <summary>
        ;;; Retrive a format by name
        ;;; </summary>
        ;;; <param name="FormatName">Name of format to retrieve</param>
        ;;; <returns>Repository format object</returns>
        public method GetFormat, @RpsFormat
            required in FormatName, String
            endparams
        proc
            mreturn new RpsFormat(FormatName)
        endmethod

        ;;---------------------------------------------------------------------
        ;;Enumerations

        ;;; <summary>
        ;;; Collection of enumerations in the repository
        ;;; </summary>
        public property Enumerations, @RpsEnumCollection
            method get
            proc
                ;Load the enumerations collection the first time it is referenced
                if (mEnumerations==^null)
                    mEnumerations = new RpsEnumCollection(this)
                mreturn mEnumerations
            endmethod
        endproperty

    endclass

endnamespace

