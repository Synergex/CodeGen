;;*****************************************************************************
;;
;; Title:       RpsKey.dbl
;;
;; Type:        Class
;;
;; Description: Represents a single key for a Repository structure
;;
;; Date:        19th October 2007
;;
;; Author:      Steve Ives, Synergex Professional Services Group
;;              http://www.synergex.com
;;
;;*****************************************************************************
;;
;; Copyright (c) 2012, Synergex International, Inc.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;
;; * Redistributions of source code must retain the above copyright notice,
;;   this list of conditions and the following disclaimer.
;;
;; * Redistributions in binary form must reproduce the above copyright notice,
;;   this list of conditions and the following disclaimer in the documentation
;;   and/or other materials provided with the distribution.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
;; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
;; POSSIBILITY OF SUCH DAMAGE.
;;
;;*****************************************************************************

.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import CodeGen.RepositoryAPI
import Newtonsoft.Json
import Newtonsoft.Json.Converters

namespace CodeGen.RepositoryAPI

    ;;; <summary>
    ;;; Represents a repository KEY definition.
    ;;; </summary>
    public class RpsKey

        protected mRepository, @Repository

        public override method ToString, String
            endparams
        proc
            mreturn String.Format("RpsKey: {0}, {1}",SequenceNumber,Name)
        endmethod

        ;;Key attribute data
        protected mk_info       ,k_info
        protected mDescription  ,String
        protected mNullValue    ,String
        protected mSegments     ,@RpsKeySegmentCollection

        ;;; <summary>
        ;;; Default constructor. Creates an empty key.
        ;;; </summary>
        public method RpsKey
            required in aRepository, @Repository
        proc
            mRepository = aRepository
            init mk_info, mDescription, mNullValue
        endmethod

        ;;; <summary>
        ;;; Load a key definition
        ;;; </summary>
        ;;; <param name="StructureName">Structure name</param>
        ;;; <param name="KeyName">Key namew</param>
        public method RpsKey
            required in aRepository, @Repository
            required in StructureName, String
            required in KeyName, String
            endparams
        proc
            mRepository = aRepository
            mRepository.CheckIsOpen()
            LoadKey(StructureName,KeyName)
        endmethod

        ;; Destructor
        method ~RpsKey
        proc
            clear mSegments
        endmethod

        ;;Load key
        private method LoadKey, void
            required in StructureName, String
            required in KeyName, String
            endparams
        proc
            begin
                data ms_info, s_info

                ;;Set the current structure?
                dd_struct(mRepository.RpsControl,DDS_INFO,StructureName,^a(ms_info))
                if (mRepository.RpsControl.error)
                    throw new RpsKeyException("Failed to set current repository structure to "+StructureName)

                ;;Get key information record
                dd_key(mRepository.RpsControl,DDK_INFO,KeyName,^a(mk_info))
                if (mRepository.RpsControl.error)
                    throw new RpsKeyException("Failed to get key information for repository key "+StructureName+"."+KeyName)

                ;;Get key description
                if (mk_info.ki_desc) then
                begin
                    data tmpDescription, a40
                    dd_key(mRepository.RpsControl,DDK_TEXT,mk_info.ki_desc,tmpDescription)
                    if (mRepository.RpsControl.error) then
                        throw new RpsKeyException("Failed to get description repository key "+StructureName+"."+KeyName)
                    else
                        mDescription = %atrim(tmpDescription)
                end
                else
                    mDescription = ""

                ;;Get null value string
                if (mk_info.ki_nullval) then
                begin
                    data tmpNullValue, a255
                    dd_key(mRepository.RpsControl,DDK_TEXT,mk_info.ki_nullval,tmpNullValue)
                    if (mRepository.RpsControl.error) then
                        throw new RpsKeyException("Failed to get null key string for repository key "+StructureName+"."+KeyName)
                    else
                        mNullValue = %atrim(tmpNullValue)
                end
                else
                    mNullValue = ""

                ;;Load the key segments collection
                mSegments = new RpsKeySegmentCollection(mk_info)

                ;;If no key density is specified then default to 50%
                if (!mk_info.ki_density)
                    mk_info.ki_density = 50
            end
        endmethod

        ;;---------------------------------------------------------------------
        ;;Public properties to expose the keys raw DDLIB data

        public property ddlib_k_info, k_info
            method get
            proc
                mreturn mk_info
            endmethod
        endproperty

        ;;---------------------------------------------------------------------
        ;;Public properties to expose the keys attributes

        ;;; <summary>
        ;;; Sequence number
        ;;; </summary>
        public property SequenceNumber, int
            method get
            proc
                mreturn mk_info.ki_seqnm
            endmethod
        endproperty

        ;;; <summary>
        ;;; Key name
        ;;; </summary>
        public property Name, String
            method get
            proc
                mreturn RpsUtils.UpperCase(mk_info.ki_name)
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Key type
        ;;; </summary>
        public property KeyType, RpsKeyType
            method get
            proc
                mreturn (RpsKeyType)integer(mk_info.ki_ktype)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Total size of all key segments
        ;;; </summary>
        public property Size, int
            method get
            proc
                mreturn mk_info.ki_size
            endmethod
        endproperty

        ;;; <summary>
        ;;; Description
        ;;; </summary>
        public property Description, String
            method get
            proc
                mreturn mDescription
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Sort order
        ;;; </summary>
        public property SortOrder, RpsKeyOrder
            method get
            proc
                mreturn (RpsKeyOrder)integer(mk_info.ki_order)
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Duplicates allowed?
        ;;; </summary>
        public property Duplicates, RpsKeyDuplicates
            method get
            proc
                mreturn (RpsKeyDuplicates)integer(mk_info.ki_dups)
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Insert duplicates at front or end?
        ;;; </summary>
        public property InsertDuplicates, RpsKeyInsertDups
            method get
            proc
                mreturn (RpsKeyInsertDups)integer(mk_info.ki_insert)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Can existing key values be changed?
        ;;; </summary>
        public property Modifiable, boolean
            method get
            proc
                mreturn mk_info.ki_mod
            endmethod
        endproperty

        {JsonConverter(^typeof(StringEnumConverter))}
        ;;; <summary>
        ;;; Null key type?
        ;;; </summary>
        public property NullKey, RpsKeyNullType
            method get
            proc
                mreturn (RpsKeyNullType)integer(mk_info.ki_null)
            endmethod
        endproperty

        ;;; <summary>
        ;;; Null key value
        ;;; </summary>
        public property NullKeyValue, String
            method get
            proc
                mreturn mNullValue
            endmethod
        endproperty

        ;;; <summary>
        ;;; Key of reference #
        ;;; </summary>
        public property KeyOfReference, int
            method get
            proc
                mreturn mk_info.ki_krf
            endmethod
        endproperty

        ;;; <summary>
        ;;; Key density
        ;;; </summary>
        public property Density, int
            method get
            proc
                mreturn mk_info.ki_density
            endmethod
        endproperty

        ;;; <summary>
        ;;; Index compression?
        ;;; </summary>
        public property CompressIndex, boolean
            method get
            proc
                mreturn mk_info.ki_cmpidx
            endmethod
        endproperty

        ;;; <summary>
        ;;; Record comporession?
        ;;; </summary>
        public property CompressData, boolean
            method get
            proc
                mreturn mk_info.ki_cmprec
            endmethod
        endproperty

        ;;; <summary>
        ;;; Key compression?
        ;;; </summary>
        public property CompressKey, boolean
            method get
            proc
                mreturn mk_info.ki_cmpkey
            endmethod
        endproperty

        ;;; <summary>
        ;;; Accessible to ODBC?
        ;;; </summary>
        public property OdbcAccessible, boolean
            method get
            proc
                mreturn mk_info.ki_odbcvw
            endmethod
        endproperty

        ;;; <summary>
        ;;; Key segments
        ;;; </summary>
        public property Segments, @RpsKeySegmentCollection
            method get
            proc
                mreturn mSegments
            endmethod
        endproperty

    endclass

endnamespace
